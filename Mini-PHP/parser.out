Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    APOSTROPHE
    ARRAY
    AS
    CALLABLE
    CATCH
    CLONE
    CLOSETAGAL
    COMMENTS
    COMMENTS_C99
    CONST
    CONTINUE
    DECLARE
    DIE
    DOT
    DOT_DOT
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EVAL
    EXIT
    EXTENDS
    FOREACH
    GLOBAL
    GOTO
    HASHTAG
    IMPLEMENTS
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MINUSEQUAL
    NAMESPACE
    PLUSEQUAL
    PRINT
    QUOTES
    REQUIRE_ONCE
    STATIC
    THROW
    TRAIT
    TRY
    USE
    VAR
    XOR
    __HALT_COMPILER

Grammar

Rule 0     S' -> program
Rule 1     program -> OPENTAG declaration_list CLOSETAG
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     declaration -> fun_call
Rule 7     declaration -> area fun_declaration
Rule 8     declaration -> header_declaration
Rule 9     declaration -> class_declaration
Rule 10    declaration -> echo_stmt
Rule 11    declaration -> unset_stmt
Rule 12    declaration -> selection_stmt
Rule 13    declaration -> iteration_stmt
Rule 14    declaration -> typeclass
Rule 15    echo_stmt -> echo_stmt ECHO STRING SEMI
Rule 16    echo_stmt -> echo_stmt ECHO IDVAR SEMI
Rule 17    echo_stmt -> empty
Rule 18    echo_stmt -> echo_stmt ECHO NUM SEMI
Rule 19    echo_stmt -> echo_stmt ECHO boolean SEMI
Rule 20    echo_stmt -> echo_stmt ECHO fun_declaration SEMI
Rule 21    unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI
Rule 22    header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI
Rule 23    header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI
Rule 24    class_declaration -> area CLASS ID LBLOCK attribute RBLOCK
Rule 25    class_declaration -> CLASS ID LBLOCK attribute RBLOCK
Rule 26    attribute -> attribute area var_declaration
Rule 27    attribute -> area var_declaration
Rule 28    attribute -> attribute area fun_declaration
Rule 29    attribute -> area fun_declaration
Rule 30    area -> PRIVATE
Rule 31    area -> PUBLIC
Rule 32    area -> PROTECTED
Rule 33    var_declaration -> IDVAR SEMI var_declaration
Rule 34    var_declaration -> IDVAR SEMI
Rule 35    var_declaration -> TIMESTIMES IDVAR SEMI
Rule 36    var_declaration -> TIMESTIMES IDVAR SEMI var_declaration
Rule 37    var_declaration -> IDVAR EQUAL NUM SEMI var_declaration
Rule 38    var_declaration -> IDVAR EQUAL NUM SEMI
Rule 39    var_declaration -> IDVAR EQUAL NULL SEMI var_declaration
Rule 40    var_declaration -> IDVAR EQUAL NULL SEMI
Rule 41    var_declaration -> IDVAR EQUAL boolean SEMI var_declaration
Rule 42    var_declaration -> IDVAR EQUAL boolean SEMI
Rule 43    var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration
Rule 44    var_declaration -> IDVAR EQUAL IDVAR SEMI
Rule 45    var_declaration -> AMPERSANT IDVAR SEMI var_declaration
Rule 46    var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
Rule 47    var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI
Rule 48    var_declaration -> IDVAR EQUAL STRING SEMI
Rule 49    var_declaration -> AMPERSANT IDVAR SEMI
Rule 50    var_declaration -> IDVAR EQUAL simple_expression SEMI
Rule 51    fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt
Rule 52    fun_call -> ID LPAREN params RPAREN SEMI
Rule 53    params -> param_list
Rule 54    params -> empty
Rule 55    param_list -> param_list COMMA param_list
Rule 56    param_list -> param
Rule 57    param -> IDVAR
Rule 58    param -> IDVAR LBRACKET RBRACKET
Rule 59    compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
Rule 60    local_declarations -> local_declarations var_declaration
Rule 61    local_declarations -> empty
Rule 62    statement_list -> statement_list statement
Rule 63    statement_list -> empty
Rule 64    statement -> expression_stmt
Rule 65    statement -> compount_stmt
Rule 66    statement -> selection_stmt
Rule 67    statement -> iteration_stmt
Rule 68    statement -> return_stmt
Rule 69    statement -> class_declaration
Rule 70    statement -> echo_stmt
Rule 71    expression_stmt -> expression SEMI
Rule 72    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 73    selection_stmt -> IF LPAREN expression RPAREN statement selection
Rule 74    selection -> ELSE statement
Rule 75    selection -> ELSEIF statement selection
Rule 76    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 77    selection_stmt -> CASE NUM COLON statement BREAK SEMI
Rule 78    selection_stmt -> DEFAULT COLON statement BREAK SEMI
Rule 79    iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
Rule 80    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 81    iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
Rule 82    return_stmt -> RETURN SEMI
Rule 83    return_stmt -> RETURN expression SEMI
Rule 84    expression -> var EQUAL expression
Rule 85    expression -> simple_expression
Rule 86    expression -> var EQUAL AMPERSANT IDVAR
Rule 87    expression -> expression AND expression
Rule 88    expression -> expression OR expression
Rule 89    var -> IDVAR
Rule 90    var -> IDVAR LBRACKET expression RBRACKET
Rule 91    simple_expression -> additive_expression relop additive_expression
Rule 92    simple_expression -> additive_expression
Rule 93    relop -> LESS
Rule 94    relop -> LESSEQUAL
Rule 95    relop -> GREATER
Rule 96    relop -> GREATEREQUAL
Rule 97    relop -> DEQUAL
Rule 98    relop -> DISTINT
Rule 99    relop -> ISEQUAL
Rule 100   additive_expression -> additive_expression addop term
Rule 101   additive_expression -> term
Rule 102   additive_expression -> term MINUSMINUS
Rule 103   additive_expression -> term PLUSPLUS
Rule 104   addop -> PLUS
Rule 105   addop -> MINUS
Rule 106   term -> term mulop factor
Rule 107   term -> factor
Rule 108   mulop -> TIMES
Rule 109   mulop -> DIVIDE
Rule 110   factor -> LPAREN expression RPAREN
Rule 111   factor -> var
Rule 112   factor -> NUM
Rule 113   factor -> boolean
Rule 114   factor -> IDVAR LPAREN args RPAREN
Rule 115   args -> args_list
Rule 116   args -> empty
Rule 117   args -> VOID
Rule 118   args_list -> args_list COMMA expression
Rule 119   args_list -> expression
Rule 120   boolean -> TRUE
Rule 121   boolean -> FALSE
Rule 122   typeclass -> ID IDVAR EQUAL NEW constructor SEMI
Rule 123   constructor -> ID LPAREN RPAREN
Rule 124   constructor -> ID LPAREN args RPAREN
Rule 125   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AMPERSANT            : 45 46 47 49 86
AND                  : 87
APOSTROPHE           : 
ARRAY                : 
AS                   : 
BREAK                : 77 78
CALLABLE             : 
CASE                 : 77
CATCH                : 
CLASS                : 24 25
CLONE                : 
CLOSETAG             : 1
CLOSETAGAL           : 
COLON                : 77 78
COMMA                : 55 118
COMMENTS             : 
COMMENTS_C99         : 
CONST                : 
CONTINUE             : 
DECLARE              : 
DEFAULT              : 78
DEQUAL               : 97
DIE                  : 
DISTINT              : 98
DIVIDE               : 109
DO                   : 81
DOT                  : 
DOT_DOT              : 
ECHO                 : 15 16 18 19 20
ELSE                 : 74
ELSEIF               : 75
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUAL                : 37 38 39 40 41 42 43 44 46 47 48 50 84 86 122
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 121
FOR                  : 79
FOREACH              : 
FUNCTION             : 51
GLOBAL               : 
GOTO                 : 
GREATER              : 95
GREATEREQUAL         : 96
HASHTAG              : 
ID                   : 24 25 51 52 122 123 124
IDVAR                : 16 21 33 34 35 36 37 38 39 40 41 42 43 43 44 44 45 46 46 47 47 48 49 50 57 58 86 89 90 114 122
IF                   : 72 73
IMPLEMENTS           : 
INCLUDE              : 23
INCLUDE_ONCE         : 
INSTANCEOF           : 
INSTEADOF            : 
INTERFACE            : 
ISEQUAL              : 99
ISSET                : 
LBLOCK               : 24 25 59 81
LBRACKET             : 58 90
LESS                 : 93
LESSEQUAL            : 94
LIST                 : 
LPAREN               : 21 22 23 51 52 72 73 76 79 80 81 110 114 123 124
MINUS                : 105
MINUSEQUAL           : 
MINUSMINUS           : 102
NAMESPACE            : 
NEW                  : 122
NULL                 : 39 40
NUM                  : 18 37 38 77 112
OPENTAG              : 1
OR                   : 88
PLUS                 : 104
PLUSEQUAL            : 
PLUSPLUS             : 103
PRINT                : 
PRIVATE              : 30
PROTECTED            : 32
PUBLIC               : 31
QUOTES               : 
RBLOCK               : 24 25 59 81
RBRACKET             : 58 90
REQUIRE              : 22
REQUIRE_ONCE         : 
RETURN               : 82 83
RPAREN               : 21 22 23 51 52 72 73 76 79 80 81 110 114 123 124
SEMI                 : 15 16 18 19 20 21 22 23 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 52 71 77 78 79 81 82 83 122
STATIC               : 
STRING               : 15 22 23 48
SWITCH               : 76
THROW                : 
TIMES                : 108
TIMESTIMES           : 35 36
TRAIT                : 
TRUE                 : 120
TRY                  : 
UNSET                : 21
USE                  : 
VAR                  : 
VOID                 : 117
WHILE                : 80 81
XOR                  : 
__HALT_COMPILER      : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 79 91 91 92 100
addop                : 100
area                 : 7 24 26 27 28 29
args                 : 114 124
args_list            : 115 118
attribute            : 24 25 26 28
boolean              : 19 41 42 113
class_declaration    : 9 69
compount_stmt        : 51 65
constructor          : 122
declaration          : 2 3
declaration_list     : 1 2
echo_stmt            : 10 15 16 18 19 20 59 59 59 70
empty                : 17 54 61 63 116
expression           : 71 72 73 79 80 81 83 84 87 87 88 88 90 110 118 119
expression_stmt      : 64
factor               : 106 107
fun_call             : 6
fun_declaration      : 5 7 20 28 29
header_declaration   : 8
iteration_stmt       : 13 67
local_declarations   : 59 60
mulop                : 106
param                : 56
param_list           : 53 55 55
params               : 51 52
program              : 0
relop                : 91
return_stmt          : 68
selection            : 73 75
selection_stmt       : 12 46 66
simple_expression    : 50 85
statement            : 62 72 73 74 75 76 77 78 79 80 81
statement_list       : 59 62
term                 : 100 101 102 103 106
typeclass            : 14
unset_stmt           : 11
var                  : 76 84 86 111
var_declaration      : 4 26 27 33 36 37 39 41 43 45 60 79

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPENTAG declaration_list CLOSETAG

    OPENTAG         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPENTAG . declaration_list CLOSETAG
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . fun_call
    (7) declaration -> . area fun_declaration
    (8) declaration -> . header_declaration
    (9) declaration -> . class_declaration
    (10) declaration -> . echo_stmt
    (11) declaration -> . unset_stmt
    (12) declaration -> . selection_stmt
    (13) declaration -> . iteration_stmt
    (14) declaration -> . typeclass
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (51) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (52) fun_call -> . ID LPAREN params RPAREN SEMI
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (22) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMI
    (23) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (21) unset_stmt -> . UNSET LPAREN IDVAR RPAREN SEMI
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (122) typeclass -> . ID IDVAR EQUAL NEW constructor SEMI
    (125) empty -> .

  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for UNSET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 17
    AMPERSANT       shift and go to state 18
    FUNCTION        shift and go to state 19
    ID              shift and go to state 20
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    REQUIRE         shift and go to state 24
    INCLUDE         shift and go to state 25
    CLASS           shift and go to state 26
    UNSET           shift and go to state 28
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    ECHO            reduce using rule 125 (empty -> .)
    CLOSETAG        reduce using rule 125 (empty -> .)

  ! IDVAR           [ reduce using rule 125 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 125 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 125 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 125 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 125 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 125 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 125 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 125 (empty -> .) ]
  ! CLASS           [ reduce using rule 125 (empty -> .) ]
  ! UNSET           [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! SWITCH          [ reduce using rule 125 (empty -> .) ]
  ! CASE            [ reduce using rule 125 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! DO              [ reduce using rule 125 (empty -> .) ]

    declaration_list               shift and go to state 3
    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    fun_call                       shift and go to state 7
    area                           shift and go to state 8
    header_declaration             shift and go to state 9
    class_declaration              shift and go to state 10
    echo_stmt                      shift and go to state 11
    unset_stmt                     shift and go to state 12
    selection_stmt                 shift and go to state 13
    iteration_stmt                 shift and go to state 14
    typeclass                      shift and go to state 15
    empty                          shift and go to state 27

state 3

    (1) program -> OPENTAG declaration_list . CLOSETAG
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . fun_call
    (7) declaration -> . area fun_declaration
    (8) declaration -> . header_declaration
    (9) declaration -> . class_declaration
    (10) declaration -> . echo_stmt
    (11) declaration -> . unset_stmt
    (12) declaration -> . selection_stmt
    (13) declaration -> . iteration_stmt
    (14) declaration -> . typeclass
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (51) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (52) fun_call -> . ID LPAREN params RPAREN SEMI
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (22) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMI
    (23) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (21) unset_stmt -> . UNSET LPAREN IDVAR RPAREN SEMI
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (122) typeclass -> . ID IDVAR EQUAL NEW constructor SEMI
    (125) empty -> .

  ! shift/reduce conflict for CLOSETAG resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for UNSET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    CLOSETAG        shift and go to state 36
    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 17
    AMPERSANT       shift and go to state 18
    FUNCTION        shift and go to state 19
    ID              shift and go to state 20
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    REQUIRE         shift and go to state 24
    INCLUDE         shift and go to state 25
    CLASS           shift and go to state 26
    UNSET           shift and go to state 28
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    ECHO            reduce using rule 125 (empty -> .)

  ! CLOSETAG        [ reduce using rule 125 (empty -> .) ]
  ! IDVAR           [ reduce using rule 125 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 125 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 125 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 125 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 125 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 125 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 125 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 125 (empty -> .) ]
  ! CLASS           [ reduce using rule 125 (empty -> .) ]
  ! UNSET           [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! SWITCH          [ reduce using rule 125 (empty -> .) ]
  ! CASE            [ reduce using rule 125 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! DO              [ reduce using rule 125 (empty -> .) ]

    declaration                    shift and go to state 37
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    fun_call                       shift and go to state 7
    area                           shift and go to state 8
    header_declaration             shift and go to state 9
    class_declaration              shift and go to state 10
    echo_stmt                      shift and go to state 11
    unset_stmt                     shift and go to state 12
    selection_stmt                 shift and go to state 13
    iteration_stmt                 shift and go to state 14
    typeclass                      shift and go to state 15
    empty                          shift and go to state 27

state 4

    (3) declaration_list -> declaration .

    CLOSETAG        reduce using rule 3 (declaration_list -> declaration .)
    IDVAR           reduce using rule 3 (declaration_list -> declaration .)
    TIMESTIMES      reduce using rule 3 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 3 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 3 (declaration_list -> declaration .)
    ID              reduce using rule 3 (declaration_list -> declaration .)
    PRIVATE         reduce using rule 3 (declaration_list -> declaration .)
    PUBLIC          reduce using rule 3 (declaration_list -> declaration .)
    PROTECTED       reduce using rule 3 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 3 (declaration_list -> declaration .)
    INCLUDE         reduce using rule 3 (declaration_list -> declaration .)
    CLASS           reduce using rule 3 (declaration_list -> declaration .)
    UNSET           reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    SWITCH          reduce using rule 3 (declaration_list -> declaration .)
    CASE            reduce using rule 3 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    DO              reduce using rule 3 (declaration_list -> declaration .)
    ECHO            reduce using rule 3 (declaration_list -> declaration .)


state 5

    (4) declaration -> var_declaration .

    CLOSETAG        reduce using rule 4 (declaration -> var_declaration .)
    IDVAR           reduce using rule 4 (declaration -> var_declaration .)
    TIMESTIMES      reduce using rule 4 (declaration -> var_declaration .)
    AMPERSANT       reduce using rule 4 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 4 (declaration -> var_declaration .)
    ID              reduce using rule 4 (declaration -> var_declaration .)
    PRIVATE         reduce using rule 4 (declaration -> var_declaration .)
    PUBLIC          reduce using rule 4 (declaration -> var_declaration .)
    PROTECTED       reduce using rule 4 (declaration -> var_declaration .)
    REQUIRE         reduce using rule 4 (declaration -> var_declaration .)
    INCLUDE         reduce using rule 4 (declaration -> var_declaration .)
    CLASS           reduce using rule 4 (declaration -> var_declaration .)
    UNSET           reduce using rule 4 (declaration -> var_declaration .)
    IF              reduce using rule 4 (declaration -> var_declaration .)
    SWITCH          reduce using rule 4 (declaration -> var_declaration .)
    CASE            reduce using rule 4 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 4 (declaration -> var_declaration .)
    FOR             reduce using rule 4 (declaration -> var_declaration .)
    WHILE           reduce using rule 4 (declaration -> var_declaration .)
    DO              reduce using rule 4 (declaration -> var_declaration .)
    ECHO            reduce using rule 4 (declaration -> var_declaration .)


state 6

    (5) declaration -> fun_declaration .

    CLOSETAG        reduce using rule 5 (declaration -> fun_declaration .)
    IDVAR           reduce using rule 5 (declaration -> fun_declaration .)
    TIMESTIMES      reduce using rule 5 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 5 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 5 (declaration -> fun_declaration .)
    ID              reduce using rule 5 (declaration -> fun_declaration .)
    PRIVATE         reduce using rule 5 (declaration -> fun_declaration .)
    PUBLIC          reduce using rule 5 (declaration -> fun_declaration .)
    PROTECTED       reduce using rule 5 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 5 (declaration -> fun_declaration .)
    INCLUDE         reduce using rule 5 (declaration -> fun_declaration .)
    CLASS           reduce using rule 5 (declaration -> fun_declaration .)
    UNSET           reduce using rule 5 (declaration -> fun_declaration .)
    IF              reduce using rule 5 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 5 (declaration -> fun_declaration .)
    CASE            reduce using rule 5 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 5 (declaration -> fun_declaration .)
    FOR             reduce using rule 5 (declaration -> fun_declaration .)
    WHILE           reduce using rule 5 (declaration -> fun_declaration .)
    DO              reduce using rule 5 (declaration -> fun_declaration .)
    ECHO            reduce using rule 5 (declaration -> fun_declaration .)


state 7

    (6) declaration -> fun_call .

    CLOSETAG        reduce using rule 6 (declaration -> fun_call .)
    IDVAR           reduce using rule 6 (declaration -> fun_call .)
    TIMESTIMES      reduce using rule 6 (declaration -> fun_call .)
    AMPERSANT       reduce using rule 6 (declaration -> fun_call .)
    FUNCTION        reduce using rule 6 (declaration -> fun_call .)
    ID              reduce using rule 6 (declaration -> fun_call .)
    PRIVATE         reduce using rule 6 (declaration -> fun_call .)
    PUBLIC          reduce using rule 6 (declaration -> fun_call .)
    PROTECTED       reduce using rule 6 (declaration -> fun_call .)
    REQUIRE         reduce using rule 6 (declaration -> fun_call .)
    INCLUDE         reduce using rule 6 (declaration -> fun_call .)
    CLASS           reduce using rule 6 (declaration -> fun_call .)
    UNSET           reduce using rule 6 (declaration -> fun_call .)
    IF              reduce using rule 6 (declaration -> fun_call .)
    SWITCH          reduce using rule 6 (declaration -> fun_call .)
    CASE            reduce using rule 6 (declaration -> fun_call .)
    DEFAULT         reduce using rule 6 (declaration -> fun_call .)
    FOR             reduce using rule 6 (declaration -> fun_call .)
    WHILE           reduce using rule 6 (declaration -> fun_call .)
    DO              reduce using rule 6 (declaration -> fun_call .)
    ECHO            reduce using rule 6 (declaration -> fun_call .)


state 8

    (7) declaration -> area . fun_declaration
    (24) class_declaration -> area . CLASS ID LBLOCK attribute RBLOCK
    (51) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    CLASS           shift and go to state 39
    FUNCTION        shift and go to state 19

    fun_declaration                shift and go to state 38

state 9

    (8) declaration -> header_declaration .

    CLOSETAG        reduce using rule 8 (declaration -> header_declaration .)
    IDVAR           reduce using rule 8 (declaration -> header_declaration .)
    TIMESTIMES      reduce using rule 8 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 8 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 8 (declaration -> header_declaration .)
    ID              reduce using rule 8 (declaration -> header_declaration .)
    PRIVATE         reduce using rule 8 (declaration -> header_declaration .)
    PUBLIC          reduce using rule 8 (declaration -> header_declaration .)
    PROTECTED       reduce using rule 8 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 8 (declaration -> header_declaration .)
    INCLUDE         reduce using rule 8 (declaration -> header_declaration .)
    CLASS           reduce using rule 8 (declaration -> header_declaration .)
    UNSET           reduce using rule 8 (declaration -> header_declaration .)
    IF              reduce using rule 8 (declaration -> header_declaration .)
    SWITCH          reduce using rule 8 (declaration -> header_declaration .)
    CASE            reduce using rule 8 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 8 (declaration -> header_declaration .)
    FOR             reduce using rule 8 (declaration -> header_declaration .)
    WHILE           reduce using rule 8 (declaration -> header_declaration .)
    DO              reduce using rule 8 (declaration -> header_declaration .)
    ECHO            reduce using rule 8 (declaration -> header_declaration .)


state 10

    (9) declaration -> class_declaration .

    CLOSETAG        reduce using rule 9 (declaration -> class_declaration .)
    IDVAR           reduce using rule 9 (declaration -> class_declaration .)
    TIMESTIMES      reduce using rule 9 (declaration -> class_declaration .)
    AMPERSANT       reduce using rule 9 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 9 (declaration -> class_declaration .)
    ID              reduce using rule 9 (declaration -> class_declaration .)
    PRIVATE         reduce using rule 9 (declaration -> class_declaration .)
    PUBLIC          reduce using rule 9 (declaration -> class_declaration .)
    PROTECTED       reduce using rule 9 (declaration -> class_declaration .)
    REQUIRE         reduce using rule 9 (declaration -> class_declaration .)
    INCLUDE         reduce using rule 9 (declaration -> class_declaration .)
    CLASS           reduce using rule 9 (declaration -> class_declaration .)
    UNSET           reduce using rule 9 (declaration -> class_declaration .)
    IF              reduce using rule 9 (declaration -> class_declaration .)
    SWITCH          reduce using rule 9 (declaration -> class_declaration .)
    CASE            reduce using rule 9 (declaration -> class_declaration .)
    DEFAULT         reduce using rule 9 (declaration -> class_declaration .)
    FOR             reduce using rule 9 (declaration -> class_declaration .)
    WHILE           reduce using rule 9 (declaration -> class_declaration .)
    DO              reduce using rule 9 (declaration -> class_declaration .)
    ECHO            reduce using rule 9 (declaration -> class_declaration .)


state 11

    (10) declaration -> echo_stmt .
    (15) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (16) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (18) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (19) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (20) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI

  ! shift/reduce conflict for ECHO resolved as shift
    CLOSETAG        reduce using rule 10 (declaration -> echo_stmt .)
    IDVAR           reduce using rule 10 (declaration -> echo_stmt .)
    TIMESTIMES      reduce using rule 10 (declaration -> echo_stmt .)
    AMPERSANT       reduce using rule 10 (declaration -> echo_stmt .)
    FUNCTION        reduce using rule 10 (declaration -> echo_stmt .)
    ID              reduce using rule 10 (declaration -> echo_stmt .)
    PRIVATE         reduce using rule 10 (declaration -> echo_stmt .)
    PUBLIC          reduce using rule 10 (declaration -> echo_stmt .)
    PROTECTED       reduce using rule 10 (declaration -> echo_stmt .)
    REQUIRE         reduce using rule 10 (declaration -> echo_stmt .)
    INCLUDE         reduce using rule 10 (declaration -> echo_stmt .)
    CLASS           reduce using rule 10 (declaration -> echo_stmt .)
    UNSET           reduce using rule 10 (declaration -> echo_stmt .)
    IF              reduce using rule 10 (declaration -> echo_stmt .)
    SWITCH          reduce using rule 10 (declaration -> echo_stmt .)
    CASE            reduce using rule 10 (declaration -> echo_stmt .)
    DEFAULT         reduce using rule 10 (declaration -> echo_stmt .)
    FOR             reduce using rule 10 (declaration -> echo_stmt .)
    WHILE           reduce using rule 10 (declaration -> echo_stmt .)
    DO              reduce using rule 10 (declaration -> echo_stmt .)
    ECHO            shift and go to state 40

  ! ECHO            [ reduce using rule 10 (declaration -> echo_stmt .) ]


state 12

    (11) declaration -> unset_stmt .

    CLOSETAG        reduce using rule 11 (declaration -> unset_stmt .)
    IDVAR           reduce using rule 11 (declaration -> unset_stmt .)
    TIMESTIMES      reduce using rule 11 (declaration -> unset_stmt .)
    AMPERSANT       reduce using rule 11 (declaration -> unset_stmt .)
    FUNCTION        reduce using rule 11 (declaration -> unset_stmt .)
    ID              reduce using rule 11 (declaration -> unset_stmt .)
    PRIVATE         reduce using rule 11 (declaration -> unset_stmt .)
    PUBLIC          reduce using rule 11 (declaration -> unset_stmt .)
    PROTECTED       reduce using rule 11 (declaration -> unset_stmt .)
    REQUIRE         reduce using rule 11 (declaration -> unset_stmt .)
    INCLUDE         reduce using rule 11 (declaration -> unset_stmt .)
    CLASS           reduce using rule 11 (declaration -> unset_stmt .)
    UNSET           reduce using rule 11 (declaration -> unset_stmt .)
    IF              reduce using rule 11 (declaration -> unset_stmt .)
    SWITCH          reduce using rule 11 (declaration -> unset_stmt .)
    CASE            reduce using rule 11 (declaration -> unset_stmt .)
    DEFAULT         reduce using rule 11 (declaration -> unset_stmt .)
    FOR             reduce using rule 11 (declaration -> unset_stmt .)
    WHILE           reduce using rule 11 (declaration -> unset_stmt .)
    DO              reduce using rule 11 (declaration -> unset_stmt .)
    ECHO            reduce using rule 11 (declaration -> unset_stmt .)


state 13

    (12) declaration -> selection_stmt .

    CLOSETAG        reduce using rule 12 (declaration -> selection_stmt .)
    IDVAR           reduce using rule 12 (declaration -> selection_stmt .)
    TIMESTIMES      reduce using rule 12 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 12 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 12 (declaration -> selection_stmt .)
    ID              reduce using rule 12 (declaration -> selection_stmt .)
    PRIVATE         reduce using rule 12 (declaration -> selection_stmt .)
    PUBLIC          reduce using rule 12 (declaration -> selection_stmt .)
    PROTECTED       reduce using rule 12 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 12 (declaration -> selection_stmt .)
    INCLUDE         reduce using rule 12 (declaration -> selection_stmt .)
    CLASS           reduce using rule 12 (declaration -> selection_stmt .)
    UNSET           reduce using rule 12 (declaration -> selection_stmt .)
    IF              reduce using rule 12 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 12 (declaration -> selection_stmt .)
    CASE            reduce using rule 12 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 12 (declaration -> selection_stmt .)
    FOR             reduce using rule 12 (declaration -> selection_stmt .)
    WHILE           reduce using rule 12 (declaration -> selection_stmt .)
    DO              reduce using rule 12 (declaration -> selection_stmt .)
    ECHO            reduce using rule 12 (declaration -> selection_stmt .)


state 14

    (13) declaration -> iteration_stmt .

    CLOSETAG        reduce using rule 13 (declaration -> iteration_stmt .)
    IDVAR           reduce using rule 13 (declaration -> iteration_stmt .)
    TIMESTIMES      reduce using rule 13 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 13 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 13 (declaration -> iteration_stmt .)
    ID              reduce using rule 13 (declaration -> iteration_stmt .)
    PRIVATE         reduce using rule 13 (declaration -> iteration_stmt .)
    PUBLIC          reduce using rule 13 (declaration -> iteration_stmt .)
    PROTECTED       reduce using rule 13 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 13 (declaration -> iteration_stmt .)
    INCLUDE         reduce using rule 13 (declaration -> iteration_stmt .)
    CLASS           reduce using rule 13 (declaration -> iteration_stmt .)
    UNSET           reduce using rule 13 (declaration -> iteration_stmt .)
    IF              reduce using rule 13 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 13 (declaration -> iteration_stmt .)
    CASE            reduce using rule 13 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 13 (declaration -> iteration_stmt .)
    FOR             reduce using rule 13 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 13 (declaration -> iteration_stmt .)
    DO              reduce using rule 13 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 13 (declaration -> iteration_stmt .)


state 15

    (14) declaration -> typeclass .

    CLOSETAG        reduce using rule 14 (declaration -> typeclass .)
    IDVAR           reduce using rule 14 (declaration -> typeclass .)
    TIMESTIMES      reduce using rule 14 (declaration -> typeclass .)
    AMPERSANT       reduce using rule 14 (declaration -> typeclass .)
    FUNCTION        reduce using rule 14 (declaration -> typeclass .)
    ID              reduce using rule 14 (declaration -> typeclass .)
    PRIVATE         reduce using rule 14 (declaration -> typeclass .)
    PUBLIC          reduce using rule 14 (declaration -> typeclass .)
    PROTECTED       reduce using rule 14 (declaration -> typeclass .)
    REQUIRE         reduce using rule 14 (declaration -> typeclass .)
    INCLUDE         reduce using rule 14 (declaration -> typeclass .)
    CLASS           reduce using rule 14 (declaration -> typeclass .)
    UNSET           reduce using rule 14 (declaration -> typeclass .)
    IF              reduce using rule 14 (declaration -> typeclass .)
    SWITCH          reduce using rule 14 (declaration -> typeclass .)
    CASE            reduce using rule 14 (declaration -> typeclass .)
    DEFAULT         reduce using rule 14 (declaration -> typeclass .)
    FOR             reduce using rule 14 (declaration -> typeclass .)
    WHILE           reduce using rule 14 (declaration -> typeclass .)
    DO              reduce using rule 14 (declaration -> typeclass .)
    ECHO            reduce using rule 14 (declaration -> typeclass .)


state 16

    (33) var_declaration -> IDVAR . SEMI var_declaration
    (34) var_declaration -> IDVAR . SEMI
    (37) var_declaration -> IDVAR . EQUAL NUM SEMI var_declaration
    (38) var_declaration -> IDVAR . EQUAL NUM SEMI
    (39) var_declaration -> IDVAR . EQUAL NULL SEMI var_declaration
    (40) var_declaration -> IDVAR . EQUAL NULL SEMI
    (41) var_declaration -> IDVAR . EQUAL boolean SEMI var_declaration
    (42) var_declaration -> IDVAR . EQUAL boolean SEMI
    (43) var_declaration -> IDVAR . EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> IDVAR . EQUAL IDVAR SEMI
    (47) var_declaration -> IDVAR . EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> IDVAR . EQUAL STRING SEMI
    (50) var_declaration -> IDVAR . EQUAL simple_expression SEMI

    SEMI            shift and go to state 41
    EQUAL           shift and go to state 42


state 17

    (35) var_declaration -> TIMESTIMES . IDVAR SEMI
    (36) var_declaration -> TIMESTIMES . IDVAR SEMI var_declaration

    IDVAR           shift and go to state 43


state 18

    (45) var_declaration -> AMPERSANT . IDVAR SEMI var_declaration
    (46) var_declaration -> AMPERSANT . IDVAR EQUAL IDVAR SEMI selection_stmt
    (49) var_declaration -> AMPERSANT . IDVAR SEMI

    IDVAR           shift and go to state 44


state 19

    (51) fun_declaration -> FUNCTION . ID LPAREN params RPAREN compount_stmt

    ID              shift and go to state 45


state 20

    (52) fun_call -> ID . LPAREN params RPAREN SEMI
    (122) typeclass -> ID . IDVAR EQUAL NEW constructor SEMI

    LPAREN          shift and go to state 46
    IDVAR           shift and go to state 47


state 21

    (30) area -> PRIVATE .

    CLASS           reduce using rule 30 (area -> PRIVATE .)
    FUNCTION        reduce using rule 30 (area -> PRIVATE .)
    IDVAR           reduce using rule 30 (area -> PRIVATE .)
    TIMESTIMES      reduce using rule 30 (area -> PRIVATE .)
    AMPERSANT       reduce using rule 30 (area -> PRIVATE .)


state 22

    (31) area -> PUBLIC .

    CLASS           reduce using rule 31 (area -> PUBLIC .)
    FUNCTION        reduce using rule 31 (area -> PUBLIC .)
    IDVAR           reduce using rule 31 (area -> PUBLIC .)
    TIMESTIMES      reduce using rule 31 (area -> PUBLIC .)
    AMPERSANT       reduce using rule 31 (area -> PUBLIC .)


state 23

    (32) area -> PROTECTED .

    CLASS           reduce using rule 32 (area -> PROTECTED .)
    FUNCTION        reduce using rule 32 (area -> PROTECTED .)
    IDVAR           reduce using rule 32 (area -> PROTECTED .)
    TIMESTIMES      reduce using rule 32 (area -> PROTECTED .)
    AMPERSANT       reduce using rule 32 (area -> PROTECTED .)


state 24

    (22) header_declaration -> REQUIRE . LPAREN STRING RPAREN SEMI

    LPAREN          shift and go to state 48


state 25

    (23) header_declaration -> INCLUDE . LPAREN STRING RPAREN SEMI

    LPAREN          shift and go to state 49


state 26

    (25) class_declaration -> CLASS . ID LBLOCK attribute RBLOCK

    ID              shift and go to state 50


state 27

    (17) echo_stmt -> empty .

    ECHO            reduce using rule 17 (echo_stmt -> empty .)
    CLOSETAG        reduce using rule 17 (echo_stmt -> empty .)
    IDVAR           reduce using rule 17 (echo_stmt -> empty .)
    TIMESTIMES      reduce using rule 17 (echo_stmt -> empty .)
    AMPERSANT       reduce using rule 17 (echo_stmt -> empty .)
    FUNCTION        reduce using rule 17 (echo_stmt -> empty .)
    ID              reduce using rule 17 (echo_stmt -> empty .)
    PRIVATE         reduce using rule 17 (echo_stmt -> empty .)
    PUBLIC          reduce using rule 17 (echo_stmt -> empty .)
    PROTECTED       reduce using rule 17 (echo_stmt -> empty .)
    REQUIRE         reduce using rule 17 (echo_stmt -> empty .)
    INCLUDE         reduce using rule 17 (echo_stmt -> empty .)
    CLASS           reduce using rule 17 (echo_stmt -> empty .)
    UNSET           reduce using rule 17 (echo_stmt -> empty .)
    IF              reduce using rule 17 (echo_stmt -> empty .)
    SWITCH          reduce using rule 17 (echo_stmt -> empty .)
    CASE            reduce using rule 17 (echo_stmt -> empty .)
    DEFAULT         reduce using rule 17 (echo_stmt -> empty .)
    FOR             reduce using rule 17 (echo_stmt -> empty .)
    WHILE           reduce using rule 17 (echo_stmt -> empty .)
    DO              reduce using rule 17 (echo_stmt -> empty .)
    BREAK           reduce using rule 17 (echo_stmt -> empty .)
    SEMI            reduce using rule 17 (echo_stmt -> empty .)
    LBLOCK          reduce using rule 17 (echo_stmt -> empty .)
    RETURN          reduce using rule 17 (echo_stmt -> empty .)
    LPAREN          reduce using rule 17 (echo_stmt -> empty .)
    NUM             reduce using rule 17 (echo_stmt -> empty .)
    TRUE            reduce using rule 17 (echo_stmt -> empty .)
    FALSE           reduce using rule 17 (echo_stmt -> empty .)
    RBLOCK          reduce using rule 17 (echo_stmt -> empty .)
    ELSE            reduce using rule 17 (echo_stmt -> empty .)
    ELSEIF          reduce using rule 17 (echo_stmt -> empty .)


state 28

    (21) unset_stmt -> UNSET . LPAREN IDVAR RPAREN SEMI

    LPAREN          shift and go to state 51


state 29

    (72) selection_stmt -> IF . LPAREN expression RPAREN statement
    (73) selection_stmt -> IF . LPAREN expression RPAREN statement selection

    LPAREN          shift and go to state 52


state 30

    (76) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 53


state 31

    (77) selection_stmt -> CASE . NUM COLON statement BREAK SEMI

    NUM             shift and go to state 54


state 32

    (78) selection_stmt -> DEFAULT . COLON statement BREAK SEMI

    COLON           shift and go to state 55


state 33

    (79) iteration_stmt -> FOR . LPAREN var_declaration expression SEMI additive_expression RPAREN statement

    LPAREN          shift and go to state 56


state 34

    (80) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 57


state 35

    (81) iteration_stmt -> DO . LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN

    LBLOCK          shift and go to state 58


state 36

    (1) program -> OPENTAG declaration_list CLOSETAG .

    $end            reduce using rule 1 (program -> OPENTAG declaration_list CLOSETAG .)


state 37

    (2) declaration_list -> declaration_list declaration .

    CLOSETAG        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IDVAR           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    TIMESTIMES      reduce using rule 2 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PRIVATE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PUBLIC          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PROTECTED       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    INCLUDE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    UNSET           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 38

    (7) declaration -> area fun_declaration .

    CLOSETAG        reduce using rule 7 (declaration -> area fun_declaration .)
    IDVAR           reduce using rule 7 (declaration -> area fun_declaration .)
    TIMESTIMES      reduce using rule 7 (declaration -> area fun_declaration .)
    AMPERSANT       reduce using rule 7 (declaration -> area fun_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> area fun_declaration .)
    ID              reduce using rule 7 (declaration -> area fun_declaration .)
    PRIVATE         reduce using rule 7 (declaration -> area fun_declaration .)
    PUBLIC          reduce using rule 7 (declaration -> area fun_declaration .)
    PROTECTED       reduce using rule 7 (declaration -> area fun_declaration .)
    REQUIRE         reduce using rule 7 (declaration -> area fun_declaration .)
    INCLUDE         reduce using rule 7 (declaration -> area fun_declaration .)
    CLASS           reduce using rule 7 (declaration -> area fun_declaration .)
    UNSET           reduce using rule 7 (declaration -> area fun_declaration .)
    IF              reduce using rule 7 (declaration -> area fun_declaration .)
    SWITCH          reduce using rule 7 (declaration -> area fun_declaration .)
    CASE            reduce using rule 7 (declaration -> area fun_declaration .)
    DEFAULT         reduce using rule 7 (declaration -> area fun_declaration .)
    FOR             reduce using rule 7 (declaration -> area fun_declaration .)
    WHILE           reduce using rule 7 (declaration -> area fun_declaration .)
    DO              reduce using rule 7 (declaration -> area fun_declaration .)
    ECHO            reduce using rule 7 (declaration -> area fun_declaration .)


state 39

    (24) class_declaration -> area CLASS . ID LBLOCK attribute RBLOCK

    ID              shift and go to state 59


state 40

    (15) echo_stmt -> echo_stmt ECHO . STRING SEMI
    (16) echo_stmt -> echo_stmt ECHO . IDVAR SEMI
    (18) echo_stmt -> echo_stmt ECHO . NUM SEMI
    (19) echo_stmt -> echo_stmt ECHO . boolean SEMI
    (20) echo_stmt -> echo_stmt ECHO . fun_declaration SEMI
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (51) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    STRING          shift and go to state 60
    IDVAR           shift and go to state 61
    NUM             shift and go to state 62
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    FUNCTION        shift and go to state 19

    boolean                        shift and go to state 63
    fun_declaration                shift and go to state 64

state 41

    (33) var_declaration -> IDVAR SEMI . var_declaration
    (34) var_declaration -> IDVAR SEMI .
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    IDVAR           reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    TIMESTIMES      reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    AMPERSANT       reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    FUNCTION        reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    ID              reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    PRIVATE         reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    PUBLIC          reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    PROTECTED       reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    REQUIRE         reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    INCLUDE         reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    CLASS           reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    UNSET           reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    IF              reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    SWITCH          reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    CASE            reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    DEFAULT         reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    FOR             reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    WHILE           reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    DO              reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    ECHO            reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    LPAREN          reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    NUM             reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    TRUE            reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    FALSE           reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    RBLOCK          reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    LBLOCK          reduce using rule 34 (var_declaration -> IDVAR SEMI .)
    RETURN          reduce using rule 34 (var_declaration -> IDVAR SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 17 ]
  ! AMPERSANT       [ shift and go to state 18 ]

    var_declaration                shift and go to state 67

state 42

    (37) var_declaration -> IDVAR EQUAL . NUM SEMI var_declaration
    (38) var_declaration -> IDVAR EQUAL . NUM SEMI
    (39) var_declaration -> IDVAR EQUAL . NULL SEMI var_declaration
    (40) var_declaration -> IDVAR EQUAL . NULL SEMI
    (41) var_declaration -> IDVAR EQUAL . boolean SEMI var_declaration
    (42) var_declaration -> IDVAR EQUAL . boolean SEMI
    (43) var_declaration -> IDVAR EQUAL . IDVAR SEMI var_declaration
    (44) var_declaration -> IDVAR EQUAL . IDVAR SEMI
    (47) var_declaration -> IDVAR EQUAL . AMPERSANT IDVAR SEMI
    (48) var_declaration -> IDVAR EQUAL . STRING SEMI
    (50) var_declaration -> IDVAR EQUAL . simple_expression SEMI
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET

    NUM             shift and go to state 69
    NULL            shift and go to state 70
    IDVAR           shift and go to state 68
    AMPERSANT       shift and go to state 72
    STRING          shift and go to state 73
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 78

    boolean                        shift and go to state 71
    simple_expression              shift and go to state 74
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    var                            shift and go to state 79

state 43

    (35) var_declaration -> TIMESTIMES IDVAR . SEMI
    (36) var_declaration -> TIMESTIMES IDVAR . SEMI var_declaration

    SEMI            shift and go to state 80


state 44

    (45) var_declaration -> AMPERSANT IDVAR . SEMI var_declaration
    (46) var_declaration -> AMPERSANT IDVAR . EQUAL IDVAR SEMI selection_stmt
    (49) var_declaration -> AMPERSANT IDVAR . SEMI

    SEMI            shift and go to state 81
    EQUAL           shift and go to state 82


state 45

    (51) fun_declaration -> FUNCTION ID . LPAREN params RPAREN compount_stmt

    LPAREN          shift and go to state 83


state 46

    (52) fun_call -> ID LPAREN . params RPAREN SEMI
    (53) params -> . param_list
    (54) params -> . empty
    (55) param_list -> . param_list COMMA param_list
    (56) param_list -> . param
    (125) empty -> .
    (57) param -> . IDVAR
    (58) param -> . IDVAR LBRACKET RBRACKET

    RPAREN          reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 88

    params                         shift and go to state 84
    param_list                     shift and go to state 85
    empty                          shift and go to state 86
    param                          shift and go to state 87

state 47

    (122) typeclass -> ID IDVAR . EQUAL NEW constructor SEMI

    EQUAL           shift and go to state 89


state 48

    (22) header_declaration -> REQUIRE LPAREN . STRING RPAREN SEMI

    STRING          shift and go to state 90


state 49

    (23) header_declaration -> INCLUDE LPAREN . STRING RPAREN SEMI

    STRING          shift and go to state 91


state 50

    (25) class_declaration -> CLASS ID . LBLOCK attribute RBLOCK

    LBLOCK          shift and go to state 92


state 51

    (21) unset_stmt -> UNSET LPAREN . IDVAR RPAREN SEMI

    IDVAR           shift and go to state 93


state 52

    (72) selection_stmt -> IF LPAREN . expression RPAREN statement
    (73) selection_stmt -> IF LPAREN . expression RPAREN statement selection
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 94
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 53

    (76) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET

    IDVAR           shift and go to state 101

    var                            shift and go to state 100

state 54

    (77) selection_stmt -> CASE NUM . COLON statement BREAK SEMI

    COLON           shift and go to state 102


state 55

    (78) selection_stmt -> DEFAULT COLON . statement BREAK SEMI
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (125) empty -> .
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    ECHO            reduce using rule 125 (empty -> .)
    BREAK           reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    statement                      shift and go to state 103
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    echo_stmt                      shift and go to state 110
    expression                     shift and go to state 111
    var                            shift and go to state 95
    additive_expression            shift and go to state 75
    area                           shift and go to state 114
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 56

    (79) iteration_stmt -> FOR LPAREN . var_declaration expression SEMI additive_expression RPAREN statement
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 17
    AMPERSANT       shift and go to state 18

    var_declaration                shift and go to state 115

state 57

    (80) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 116
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 58

    (81) iteration_stmt -> DO LBLOCK . statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (125) empty -> .
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    ECHO            reduce using rule 125 (empty -> .)
    SEMI            reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    statement                      shift and go to state 117
    expression                     shift and go to state 111
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    echo_stmt                      shift and go to state 110
    var                            shift and go to state 95
    additive_expression            shift and go to state 75
    area                           shift and go to state 114
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 59

    (24) class_declaration -> area CLASS ID . LBLOCK attribute RBLOCK

    LBLOCK          shift and go to state 118


state 60

    (15) echo_stmt -> echo_stmt ECHO STRING . SEMI

    SEMI            shift and go to state 119


state 61

    (16) echo_stmt -> echo_stmt ECHO IDVAR . SEMI

    SEMI            shift and go to state 120


state 62

    (18) echo_stmt -> echo_stmt ECHO NUM . SEMI

    SEMI            shift and go to state 121


state 63

    (19) echo_stmt -> echo_stmt ECHO boolean . SEMI

    SEMI            shift and go to state 122


state 64

    (20) echo_stmt -> echo_stmt ECHO fun_declaration . SEMI

    SEMI            shift and go to state 123


state 65

    (120) boolean -> TRUE .

    SEMI            reduce using rule 120 (boolean -> TRUE .)
    MINUSMINUS      reduce using rule 120 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 120 (boolean -> TRUE .)
    TIMES           reduce using rule 120 (boolean -> TRUE .)
    DIVIDE          reduce using rule 120 (boolean -> TRUE .)
    LESS            reduce using rule 120 (boolean -> TRUE .)
    LESSEQUAL       reduce using rule 120 (boolean -> TRUE .)
    GREATER         reduce using rule 120 (boolean -> TRUE .)
    GREATEREQUAL    reduce using rule 120 (boolean -> TRUE .)
    DEQUAL          reduce using rule 120 (boolean -> TRUE .)
    DISTINT         reduce using rule 120 (boolean -> TRUE .)
    ISEQUAL         reduce using rule 120 (boolean -> TRUE .)
    PLUS            reduce using rule 120 (boolean -> TRUE .)
    MINUS           reduce using rule 120 (boolean -> TRUE .)
    RPAREN          reduce using rule 120 (boolean -> TRUE .)
    AND             reduce using rule 120 (boolean -> TRUE .)
    OR              reduce using rule 120 (boolean -> TRUE .)
    COMMA           reduce using rule 120 (boolean -> TRUE .)
    RBRACKET        reduce using rule 120 (boolean -> TRUE .)


state 66

    (121) boolean -> FALSE .

    SEMI            reduce using rule 121 (boolean -> FALSE .)
    MINUSMINUS      reduce using rule 121 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 121 (boolean -> FALSE .)
    TIMES           reduce using rule 121 (boolean -> FALSE .)
    DIVIDE          reduce using rule 121 (boolean -> FALSE .)
    LESS            reduce using rule 121 (boolean -> FALSE .)
    LESSEQUAL       reduce using rule 121 (boolean -> FALSE .)
    GREATER         reduce using rule 121 (boolean -> FALSE .)
    GREATEREQUAL    reduce using rule 121 (boolean -> FALSE .)
    DEQUAL          reduce using rule 121 (boolean -> FALSE .)
    DISTINT         reduce using rule 121 (boolean -> FALSE .)
    ISEQUAL         reduce using rule 121 (boolean -> FALSE .)
    PLUS            reduce using rule 121 (boolean -> FALSE .)
    MINUS           reduce using rule 121 (boolean -> FALSE .)
    RPAREN          reduce using rule 121 (boolean -> FALSE .)
    AND             reduce using rule 121 (boolean -> FALSE .)
    OR              reduce using rule 121 (boolean -> FALSE .)
    COMMA           reduce using rule 121 (boolean -> FALSE .)
    RBRACKET        reduce using rule 121 (boolean -> FALSE .)


state 67

    (33) var_declaration -> IDVAR SEMI var_declaration .

    CLOSETAG        reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    IDVAR           reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    TIMESTIMES      reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    AMPERSANT       reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    FUNCTION        reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    ID              reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    PRIVATE         reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    PUBLIC          reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    PROTECTED       reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    REQUIRE         reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    INCLUDE         reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    CLASS           reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    UNSET           reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    IF              reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    SWITCH          reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    CASE            reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    DEFAULT         reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    FOR             reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    WHILE           reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    DO              reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    ECHO            reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    LPAREN          reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    NUM             reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    TRUE            reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    FALSE           reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    RBLOCK          reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    LBLOCK          reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)
    RETURN          reduce using rule 33 (var_declaration -> IDVAR SEMI var_declaration .)


state 68

    (43) var_declaration -> IDVAR EQUAL IDVAR . SEMI var_declaration
    (44) var_declaration -> IDVAR EQUAL IDVAR . SEMI
    (114) factor -> IDVAR . LPAREN args RPAREN
    (89) var -> IDVAR .
    (90) var -> IDVAR . LBRACKET expression RBRACKET

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 124
    LPAREN          shift and go to state 125
    MINUSMINUS      reduce using rule 89 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 89 (var -> IDVAR .)
    TIMES           reduce using rule 89 (var -> IDVAR .)
    DIVIDE          reduce using rule 89 (var -> IDVAR .)
    LESS            reduce using rule 89 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 89 (var -> IDVAR .)
    GREATER         reduce using rule 89 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 89 (var -> IDVAR .)
    DEQUAL          reduce using rule 89 (var -> IDVAR .)
    DISTINT         reduce using rule 89 (var -> IDVAR .)
    ISEQUAL         reduce using rule 89 (var -> IDVAR .)
    PLUS            reduce using rule 89 (var -> IDVAR .)
    MINUS           reduce using rule 89 (var -> IDVAR .)
    LBRACKET        shift and go to state 126

  ! SEMI            [ reduce using rule 89 (var -> IDVAR .) ]


state 69

    (37) var_declaration -> IDVAR EQUAL NUM . SEMI var_declaration
    (38) var_declaration -> IDVAR EQUAL NUM . SEMI
    (112) factor -> NUM .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 127
    MINUSMINUS      reduce using rule 112 (factor -> NUM .)
    PLUSPLUS        reduce using rule 112 (factor -> NUM .)
    TIMES           reduce using rule 112 (factor -> NUM .)
    DIVIDE          reduce using rule 112 (factor -> NUM .)
    LESS            reduce using rule 112 (factor -> NUM .)
    LESSEQUAL       reduce using rule 112 (factor -> NUM .)
    GREATER         reduce using rule 112 (factor -> NUM .)
    GREATEREQUAL    reduce using rule 112 (factor -> NUM .)
    DEQUAL          reduce using rule 112 (factor -> NUM .)
    DISTINT         reduce using rule 112 (factor -> NUM .)
    ISEQUAL         reduce using rule 112 (factor -> NUM .)
    PLUS            reduce using rule 112 (factor -> NUM .)
    MINUS           reduce using rule 112 (factor -> NUM .)

  ! SEMI            [ reduce using rule 112 (factor -> NUM .) ]


state 70

    (39) var_declaration -> IDVAR EQUAL NULL . SEMI var_declaration
    (40) var_declaration -> IDVAR EQUAL NULL . SEMI

    SEMI            shift and go to state 128


state 71

    (41) var_declaration -> IDVAR EQUAL boolean . SEMI var_declaration
    (42) var_declaration -> IDVAR EQUAL boolean . SEMI
    (113) factor -> boolean .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 129
    MINUSMINUS      reduce using rule 113 (factor -> boolean .)
    PLUSPLUS        reduce using rule 113 (factor -> boolean .)
    TIMES           reduce using rule 113 (factor -> boolean .)
    DIVIDE          reduce using rule 113 (factor -> boolean .)
    LESS            reduce using rule 113 (factor -> boolean .)
    LESSEQUAL       reduce using rule 113 (factor -> boolean .)
    GREATER         reduce using rule 113 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 113 (factor -> boolean .)
    DEQUAL          reduce using rule 113 (factor -> boolean .)
    DISTINT         reduce using rule 113 (factor -> boolean .)
    ISEQUAL         reduce using rule 113 (factor -> boolean .)
    PLUS            reduce using rule 113 (factor -> boolean .)
    MINUS           reduce using rule 113 (factor -> boolean .)

  ! SEMI            [ reduce using rule 113 (factor -> boolean .) ]


state 72

    (47) var_declaration -> IDVAR EQUAL AMPERSANT . IDVAR SEMI

    IDVAR           shift and go to state 130


state 73

    (48) var_declaration -> IDVAR EQUAL STRING . SEMI

    SEMI            shift and go to state 131


state 74

    (50) var_declaration -> IDVAR EQUAL simple_expression . SEMI

    SEMI            shift and go to state 132


state 75

    (91) simple_expression -> additive_expression . relop additive_expression
    (92) simple_expression -> additive_expression .
    (100) additive_expression -> additive_expression . addop term
    (93) relop -> . LESS
    (94) relop -> . LESSEQUAL
    (95) relop -> . GREATER
    (96) relop -> . GREATEREQUAL
    (97) relop -> . DEQUAL
    (98) relop -> . DISTINT
    (99) relop -> . ISEQUAL
    (104) addop -> . PLUS
    (105) addop -> . MINUS

    SEMI            reduce using rule 92 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 92 (simple_expression -> additive_expression .)
    AND             reduce using rule 92 (simple_expression -> additive_expression .)
    OR              reduce using rule 92 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 92 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 92 (simple_expression -> additive_expression .)
    LESS            shift and go to state 135
    LESSEQUAL       shift and go to state 136
    GREATER         shift and go to state 137
    GREATEREQUAL    shift and go to state 138
    DEQUAL          shift and go to state 139
    DISTINT         shift and go to state 140
    ISEQUAL         shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

    relop                          shift and go to state 133
    addop                          shift and go to state 134

state 76

    (101) additive_expression -> term .
    (102) additive_expression -> term . MINUSMINUS
    (103) additive_expression -> term . PLUSPLUS
    (106) term -> term . mulop factor
    (108) mulop -> . TIMES
    (109) mulop -> . DIVIDE

    LESS            reduce using rule 101 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 101 (additive_expression -> term .)
    GREATER         reduce using rule 101 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 101 (additive_expression -> term .)
    DEQUAL          reduce using rule 101 (additive_expression -> term .)
    DISTINT         reduce using rule 101 (additive_expression -> term .)
    ISEQUAL         reduce using rule 101 (additive_expression -> term .)
    PLUS            reduce using rule 101 (additive_expression -> term .)
    MINUS           reduce using rule 101 (additive_expression -> term .)
    SEMI            reduce using rule 101 (additive_expression -> term .)
    RPAREN          reduce using rule 101 (additive_expression -> term .)
    AND             reduce using rule 101 (additive_expression -> term .)
    OR              reduce using rule 101 (additive_expression -> term .)
    COMMA           reduce using rule 101 (additive_expression -> term .)
    RBRACKET        reduce using rule 101 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 144
    PLUSPLUS        shift and go to state 145
    TIMES           shift and go to state 147
    DIVIDE          shift and go to state 148

    mulop                          shift and go to state 146

state 77

    (107) term -> factor .

    MINUSMINUS      reduce using rule 107 (term -> factor .)
    PLUSPLUS        reduce using rule 107 (term -> factor .)
    TIMES           reduce using rule 107 (term -> factor .)
    DIVIDE          reduce using rule 107 (term -> factor .)
    LESS            reduce using rule 107 (term -> factor .)
    LESSEQUAL       reduce using rule 107 (term -> factor .)
    GREATER         reduce using rule 107 (term -> factor .)
    GREATEREQUAL    reduce using rule 107 (term -> factor .)
    DEQUAL          reduce using rule 107 (term -> factor .)
    DISTINT         reduce using rule 107 (term -> factor .)
    ISEQUAL         reduce using rule 107 (term -> factor .)
    PLUS            reduce using rule 107 (term -> factor .)
    MINUS           reduce using rule 107 (term -> factor .)
    SEMI            reduce using rule 107 (term -> factor .)
    RPAREN          reduce using rule 107 (term -> factor .)
    AND             reduce using rule 107 (term -> factor .)
    OR              reduce using rule 107 (term -> factor .)
    COMMA           reduce using rule 107 (term -> factor .)
    RBRACKET        reduce using rule 107 (term -> factor .)


state 78

    (110) factor -> LPAREN . expression RPAREN
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 149
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 79

    (111) factor -> var .

    MINUSMINUS      reduce using rule 111 (factor -> var .)
    PLUSPLUS        reduce using rule 111 (factor -> var .)
    TIMES           reduce using rule 111 (factor -> var .)
    DIVIDE          reduce using rule 111 (factor -> var .)
    LESS            reduce using rule 111 (factor -> var .)
    LESSEQUAL       reduce using rule 111 (factor -> var .)
    GREATER         reduce using rule 111 (factor -> var .)
    GREATEREQUAL    reduce using rule 111 (factor -> var .)
    DEQUAL          reduce using rule 111 (factor -> var .)
    DISTINT         reduce using rule 111 (factor -> var .)
    ISEQUAL         reduce using rule 111 (factor -> var .)
    PLUS            reduce using rule 111 (factor -> var .)
    MINUS           reduce using rule 111 (factor -> var .)
    SEMI            reduce using rule 111 (factor -> var .)
    RPAREN          reduce using rule 111 (factor -> var .)
    AND             reduce using rule 111 (factor -> var .)
    OR              reduce using rule 111 (factor -> var .)
    COMMA           reduce using rule 111 (factor -> var .)
    RBRACKET        reduce using rule 111 (factor -> var .)


state 80

    (35) var_declaration -> TIMESTIMES IDVAR SEMI .
    (36) var_declaration -> TIMESTIMES IDVAR SEMI . var_declaration
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    IDVAR           reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    TIMESTIMES      reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    AMPERSANT       reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    FUNCTION        reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    ID              reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    PRIVATE         reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    PUBLIC          reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    PROTECTED       reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    REQUIRE         reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    INCLUDE         reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    CLASS           reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    UNSET           reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    IF              reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    SWITCH          reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    CASE            reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    DEFAULT         reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    FOR             reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    WHILE           reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    DO              reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    ECHO            reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    LPAREN          reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    NUM             reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    TRUE            reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    FALSE           reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    RBLOCK          reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    LBLOCK          reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    RETURN          reduce using rule 35 (var_declaration -> TIMESTIMES IDVAR SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 17 ]
  ! AMPERSANT       [ shift and go to state 18 ]

    var_declaration                shift and go to state 150

state 81

    (45) var_declaration -> AMPERSANT IDVAR SEMI . var_declaration
    (49) var_declaration -> AMPERSANT IDVAR SEMI .
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    IDVAR           reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    TIMESTIMES      reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    AMPERSANT       reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    FUNCTION        reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    ID              reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    PRIVATE         reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    PUBLIC          reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    PROTECTED       reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    REQUIRE         reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    INCLUDE         reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    CLASS           reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    UNSET           reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    IF              reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    SWITCH          reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    CASE            reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    DEFAULT         reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    FOR             reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    WHILE           reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    DO              reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    ECHO            reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    LPAREN          reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    NUM             reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    TRUE            reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    FALSE           reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    RBLOCK          reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    LBLOCK          reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)
    RETURN          reduce using rule 49 (var_declaration -> AMPERSANT IDVAR SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 17 ]
  ! AMPERSANT       [ shift and go to state 18 ]

    var_declaration                shift and go to state 151

state 82

    (46) var_declaration -> AMPERSANT IDVAR EQUAL . IDVAR SEMI selection_stmt

    IDVAR           shift and go to state 152


state 83

    (51) fun_declaration -> FUNCTION ID LPAREN . params RPAREN compount_stmt
    (53) params -> . param_list
    (54) params -> . empty
    (55) param_list -> . param_list COMMA param_list
    (56) param_list -> . param
    (125) empty -> .
    (57) param -> . IDVAR
    (58) param -> . IDVAR LBRACKET RBRACKET

    RPAREN          reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 88

    params                         shift and go to state 153
    param_list                     shift and go to state 85
    empty                          shift and go to state 86
    param                          shift and go to state 87

state 84

    (52) fun_call -> ID LPAREN params . RPAREN SEMI

    RPAREN          shift and go to state 154


state 85

    (53) params -> param_list .
    (55) param_list -> param_list . COMMA param_list

    RPAREN          reduce using rule 53 (params -> param_list .)
    COMMA           shift and go to state 155


state 86

    (54) params -> empty .

    RPAREN          reduce using rule 54 (params -> empty .)


state 87

    (56) param_list -> param .

    COMMA           reduce using rule 56 (param_list -> param .)
    RPAREN          reduce using rule 56 (param_list -> param .)


state 88

    (57) param -> IDVAR .
    (58) param -> IDVAR . LBRACKET RBRACKET

    COMMA           reduce using rule 57 (param -> IDVAR .)
    RPAREN          reduce using rule 57 (param -> IDVAR .)
    LBRACKET        shift and go to state 156


state 89

    (122) typeclass -> ID IDVAR EQUAL . NEW constructor SEMI

    NEW             shift and go to state 157


state 90

    (22) header_declaration -> REQUIRE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 158


state 91

    (23) header_declaration -> INCLUDE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 159


state 92

    (25) class_declaration -> CLASS ID LBLOCK . attribute RBLOCK
    (26) attribute -> . attribute area var_declaration
    (27) attribute -> . area var_declaration
    (28) attribute -> . attribute area fun_declaration
    (29) attribute -> . area fun_declaration
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED

    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23

    attribute                      shift and go to state 160
    area                           shift and go to state 161

state 93

    (21) unset_stmt -> UNSET LPAREN IDVAR . RPAREN SEMI

    RPAREN          shift and go to state 162


state 94

    (72) selection_stmt -> IF LPAREN expression . RPAREN statement
    (73) selection_stmt -> IF LPAREN expression . RPAREN statement selection
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    RPAREN          shift and go to state 163
    AND             shift and go to state 164
    OR              shift and go to state 165


state 95

    (84) expression -> var . EQUAL expression
    (86) expression -> var . EQUAL AMPERSANT IDVAR
    (111) factor -> var .

    EQUAL           shift and go to state 166
    MINUSMINUS      reduce using rule 111 (factor -> var .)
    PLUSPLUS        reduce using rule 111 (factor -> var .)
    TIMES           reduce using rule 111 (factor -> var .)
    DIVIDE          reduce using rule 111 (factor -> var .)
    LESS            reduce using rule 111 (factor -> var .)
    LESSEQUAL       reduce using rule 111 (factor -> var .)
    GREATER         reduce using rule 111 (factor -> var .)
    GREATEREQUAL    reduce using rule 111 (factor -> var .)
    DEQUAL          reduce using rule 111 (factor -> var .)
    DISTINT         reduce using rule 111 (factor -> var .)
    ISEQUAL         reduce using rule 111 (factor -> var .)
    PLUS            reduce using rule 111 (factor -> var .)
    MINUS           reduce using rule 111 (factor -> var .)
    RPAREN          reduce using rule 111 (factor -> var .)
    AND             reduce using rule 111 (factor -> var .)
    OR              reduce using rule 111 (factor -> var .)
    SEMI            reduce using rule 111 (factor -> var .)
    COMMA           reduce using rule 111 (factor -> var .)
    RBRACKET        reduce using rule 111 (factor -> var .)


state 96

    (85) expression -> simple_expression .

    RPAREN          reduce using rule 85 (expression -> simple_expression .)
    AND             reduce using rule 85 (expression -> simple_expression .)
    OR              reduce using rule 85 (expression -> simple_expression .)
    SEMI            reduce using rule 85 (expression -> simple_expression .)
    COMMA           reduce using rule 85 (expression -> simple_expression .)
    RBRACKET        reduce using rule 85 (expression -> simple_expression .)


state 97

    (89) var -> IDVAR .
    (90) var -> IDVAR . LBRACKET expression RBRACKET
    (114) factor -> IDVAR . LPAREN args RPAREN

    EQUAL           reduce using rule 89 (var -> IDVAR .)
    MINUSMINUS      reduce using rule 89 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 89 (var -> IDVAR .)
    TIMES           reduce using rule 89 (var -> IDVAR .)
    DIVIDE          reduce using rule 89 (var -> IDVAR .)
    LESS            reduce using rule 89 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 89 (var -> IDVAR .)
    GREATER         reduce using rule 89 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 89 (var -> IDVAR .)
    DEQUAL          reduce using rule 89 (var -> IDVAR .)
    DISTINT         reduce using rule 89 (var -> IDVAR .)
    ISEQUAL         reduce using rule 89 (var -> IDVAR .)
    PLUS            reduce using rule 89 (var -> IDVAR .)
    MINUS           reduce using rule 89 (var -> IDVAR .)
    RPAREN          reduce using rule 89 (var -> IDVAR .)
    AND             reduce using rule 89 (var -> IDVAR .)
    OR              reduce using rule 89 (var -> IDVAR .)
    SEMI            reduce using rule 89 (var -> IDVAR .)
    COMMA           reduce using rule 89 (var -> IDVAR .)
    RBRACKET        reduce using rule 89 (var -> IDVAR .)
    LBRACKET        shift and go to state 126
    LPAREN          shift and go to state 125


state 98

    (112) factor -> NUM .

    MINUSMINUS      reduce using rule 112 (factor -> NUM .)
    PLUSPLUS        reduce using rule 112 (factor -> NUM .)
    TIMES           reduce using rule 112 (factor -> NUM .)
    DIVIDE          reduce using rule 112 (factor -> NUM .)
    LESS            reduce using rule 112 (factor -> NUM .)
    LESSEQUAL       reduce using rule 112 (factor -> NUM .)
    GREATER         reduce using rule 112 (factor -> NUM .)
    GREATEREQUAL    reduce using rule 112 (factor -> NUM .)
    DEQUAL          reduce using rule 112 (factor -> NUM .)
    DISTINT         reduce using rule 112 (factor -> NUM .)
    ISEQUAL         reduce using rule 112 (factor -> NUM .)
    PLUS            reduce using rule 112 (factor -> NUM .)
    MINUS           reduce using rule 112 (factor -> NUM .)
    RPAREN          reduce using rule 112 (factor -> NUM .)
    AND             reduce using rule 112 (factor -> NUM .)
    OR              reduce using rule 112 (factor -> NUM .)
    SEMI            reduce using rule 112 (factor -> NUM .)
    COMMA           reduce using rule 112 (factor -> NUM .)
    RBRACKET        reduce using rule 112 (factor -> NUM .)


state 99

    (113) factor -> boolean .

    MINUSMINUS      reduce using rule 113 (factor -> boolean .)
    PLUSPLUS        reduce using rule 113 (factor -> boolean .)
    TIMES           reduce using rule 113 (factor -> boolean .)
    DIVIDE          reduce using rule 113 (factor -> boolean .)
    LESS            reduce using rule 113 (factor -> boolean .)
    LESSEQUAL       reduce using rule 113 (factor -> boolean .)
    GREATER         reduce using rule 113 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 113 (factor -> boolean .)
    DEQUAL          reduce using rule 113 (factor -> boolean .)
    DISTINT         reduce using rule 113 (factor -> boolean .)
    ISEQUAL         reduce using rule 113 (factor -> boolean .)
    PLUS            reduce using rule 113 (factor -> boolean .)
    MINUS           reduce using rule 113 (factor -> boolean .)
    RPAREN          reduce using rule 113 (factor -> boolean .)
    AND             reduce using rule 113 (factor -> boolean .)
    OR              reduce using rule 113 (factor -> boolean .)
    SEMI            reduce using rule 113 (factor -> boolean .)
    COMMA           reduce using rule 113 (factor -> boolean .)
    RBRACKET        reduce using rule 113 (factor -> boolean .)


state 100

    (76) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 167


state 101

    (89) var -> IDVAR .
    (90) var -> IDVAR . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 89 (var -> IDVAR .)
    LBRACKET        shift and go to state 126


state 102

    (77) selection_stmt -> CASE NUM COLON . statement BREAK SEMI
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (125) empty -> .
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    ECHO            reduce using rule 125 (empty -> .)
    BREAK           reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    statement                      shift and go to state 168
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    echo_stmt                      shift and go to state 110
    expression                     shift and go to state 111
    var                            shift and go to state 95
    additive_expression            shift and go to state 75
    area                           shift and go to state 114
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 103

    (78) selection_stmt -> DEFAULT COLON statement . BREAK SEMI

    BREAK           shift and go to state 169


state 104

    (64) statement -> expression_stmt .

    BREAK           reduce using rule 64 (statement -> expression_stmt .)
    SEMI            reduce using rule 64 (statement -> expression_stmt .)
    ELSE            reduce using rule 64 (statement -> expression_stmt .)
    ELSEIF          reduce using rule 64 (statement -> expression_stmt .)
    CLOSETAG        reduce using rule 64 (statement -> expression_stmt .)
    IDVAR           reduce using rule 64 (statement -> expression_stmt .)
    TIMESTIMES      reduce using rule 64 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 64 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 64 (statement -> expression_stmt .)
    ID              reduce using rule 64 (statement -> expression_stmt .)
    PRIVATE         reduce using rule 64 (statement -> expression_stmt .)
    PUBLIC          reduce using rule 64 (statement -> expression_stmt .)
    PROTECTED       reduce using rule 64 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 64 (statement -> expression_stmt .)
    INCLUDE         reduce using rule 64 (statement -> expression_stmt .)
    CLASS           reduce using rule 64 (statement -> expression_stmt .)
    UNSET           reduce using rule 64 (statement -> expression_stmt .)
    IF              reduce using rule 64 (statement -> expression_stmt .)
    SWITCH          reduce using rule 64 (statement -> expression_stmt .)
    CASE            reduce using rule 64 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 64 (statement -> expression_stmt .)
    FOR             reduce using rule 64 (statement -> expression_stmt .)
    WHILE           reduce using rule 64 (statement -> expression_stmt .)
    DO              reduce using rule 64 (statement -> expression_stmt .)
    ECHO            reduce using rule 64 (statement -> expression_stmt .)
    LPAREN          reduce using rule 64 (statement -> expression_stmt .)
    NUM             reduce using rule 64 (statement -> expression_stmt .)
    TRUE            reduce using rule 64 (statement -> expression_stmt .)
    FALSE           reduce using rule 64 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 64 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 64 (statement -> expression_stmt .)
    RETURN          reduce using rule 64 (statement -> expression_stmt .)


state 105

    (65) statement -> compount_stmt .

    BREAK           reduce using rule 65 (statement -> compount_stmt .)
    SEMI            reduce using rule 65 (statement -> compount_stmt .)
    ELSE            reduce using rule 65 (statement -> compount_stmt .)
    ELSEIF          reduce using rule 65 (statement -> compount_stmt .)
    CLOSETAG        reduce using rule 65 (statement -> compount_stmt .)
    IDVAR           reduce using rule 65 (statement -> compount_stmt .)
    TIMESTIMES      reduce using rule 65 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 65 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 65 (statement -> compount_stmt .)
    ID              reduce using rule 65 (statement -> compount_stmt .)
    PRIVATE         reduce using rule 65 (statement -> compount_stmt .)
    PUBLIC          reduce using rule 65 (statement -> compount_stmt .)
    PROTECTED       reduce using rule 65 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 65 (statement -> compount_stmt .)
    INCLUDE         reduce using rule 65 (statement -> compount_stmt .)
    CLASS           reduce using rule 65 (statement -> compount_stmt .)
    UNSET           reduce using rule 65 (statement -> compount_stmt .)
    IF              reduce using rule 65 (statement -> compount_stmt .)
    SWITCH          reduce using rule 65 (statement -> compount_stmt .)
    CASE            reduce using rule 65 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 65 (statement -> compount_stmt .)
    FOR             reduce using rule 65 (statement -> compount_stmt .)
    WHILE           reduce using rule 65 (statement -> compount_stmt .)
    DO              reduce using rule 65 (statement -> compount_stmt .)
    ECHO            reduce using rule 65 (statement -> compount_stmt .)
    LPAREN          reduce using rule 65 (statement -> compount_stmt .)
    NUM             reduce using rule 65 (statement -> compount_stmt .)
    TRUE            reduce using rule 65 (statement -> compount_stmt .)
    FALSE           reduce using rule 65 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 65 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 65 (statement -> compount_stmt .)
    RETURN          reduce using rule 65 (statement -> compount_stmt .)


state 106

    (66) statement -> selection_stmt .

    BREAK           reduce using rule 66 (statement -> selection_stmt .)
    SEMI            reduce using rule 66 (statement -> selection_stmt .)
    ELSE            reduce using rule 66 (statement -> selection_stmt .)
    ELSEIF          reduce using rule 66 (statement -> selection_stmt .)
    CLOSETAG        reduce using rule 66 (statement -> selection_stmt .)
    IDVAR           reduce using rule 66 (statement -> selection_stmt .)
    TIMESTIMES      reduce using rule 66 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 66 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 66 (statement -> selection_stmt .)
    ID              reduce using rule 66 (statement -> selection_stmt .)
    PRIVATE         reduce using rule 66 (statement -> selection_stmt .)
    PUBLIC          reduce using rule 66 (statement -> selection_stmt .)
    PROTECTED       reduce using rule 66 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 66 (statement -> selection_stmt .)
    INCLUDE         reduce using rule 66 (statement -> selection_stmt .)
    CLASS           reduce using rule 66 (statement -> selection_stmt .)
    UNSET           reduce using rule 66 (statement -> selection_stmt .)
    IF              reduce using rule 66 (statement -> selection_stmt .)
    SWITCH          reduce using rule 66 (statement -> selection_stmt .)
    CASE            reduce using rule 66 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 66 (statement -> selection_stmt .)
    FOR             reduce using rule 66 (statement -> selection_stmt .)
    WHILE           reduce using rule 66 (statement -> selection_stmt .)
    DO              reduce using rule 66 (statement -> selection_stmt .)
    ECHO            reduce using rule 66 (statement -> selection_stmt .)
    LPAREN          reduce using rule 66 (statement -> selection_stmt .)
    NUM             reduce using rule 66 (statement -> selection_stmt .)
    TRUE            reduce using rule 66 (statement -> selection_stmt .)
    FALSE           reduce using rule 66 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 66 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 66 (statement -> selection_stmt .)
    RETURN          reduce using rule 66 (statement -> selection_stmt .)


state 107

    (67) statement -> iteration_stmt .

    BREAK           reduce using rule 67 (statement -> iteration_stmt .)
    SEMI            reduce using rule 67 (statement -> iteration_stmt .)
    ELSE            reduce using rule 67 (statement -> iteration_stmt .)
    ELSEIF          reduce using rule 67 (statement -> iteration_stmt .)
    CLOSETAG        reduce using rule 67 (statement -> iteration_stmt .)
    IDVAR           reduce using rule 67 (statement -> iteration_stmt .)
    TIMESTIMES      reduce using rule 67 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 67 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 67 (statement -> iteration_stmt .)
    ID              reduce using rule 67 (statement -> iteration_stmt .)
    PRIVATE         reduce using rule 67 (statement -> iteration_stmt .)
    PUBLIC          reduce using rule 67 (statement -> iteration_stmt .)
    PROTECTED       reduce using rule 67 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 67 (statement -> iteration_stmt .)
    INCLUDE         reduce using rule 67 (statement -> iteration_stmt .)
    CLASS           reduce using rule 67 (statement -> iteration_stmt .)
    UNSET           reduce using rule 67 (statement -> iteration_stmt .)
    IF              reduce using rule 67 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 67 (statement -> iteration_stmt .)
    CASE            reduce using rule 67 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 67 (statement -> iteration_stmt .)
    FOR             reduce using rule 67 (statement -> iteration_stmt .)
    WHILE           reduce using rule 67 (statement -> iteration_stmt .)
    DO              reduce using rule 67 (statement -> iteration_stmt .)
    ECHO            reduce using rule 67 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 67 (statement -> iteration_stmt .)
    NUM             reduce using rule 67 (statement -> iteration_stmt .)
    TRUE            reduce using rule 67 (statement -> iteration_stmt .)
    FALSE           reduce using rule 67 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 67 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 67 (statement -> iteration_stmt .)
    RETURN          reduce using rule 67 (statement -> iteration_stmt .)


state 108

    (68) statement -> return_stmt .

    BREAK           reduce using rule 68 (statement -> return_stmt .)
    SEMI            reduce using rule 68 (statement -> return_stmt .)
    ELSE            reduce using rule 68 (statement -> return_stmt .)
    ELSEIF          reduce using rule 68 (statement -> return_stmt .)
    CLOSETAG        reduce using rule 68 (statement -> return_stmt .)
    IDVAR           reduce using rule 68 (statement -> return_stmt .)
    TIMESTIMES      reduce using rule 68 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 68 (statement -> return_stmt .)
    FUNCTION        reduce using rule 68 (statement -> return_stmt .)
    ID              reduce using rule 68 (statement -> return_stmt .)
    PRIVATE         reduce using rule 68 (statement -> return_stmt .)
    PUBLIC          reduce using rule 68 (statement -> return_stmt .)
    PROTECTED       reduce using rule 68 (statement -> return_stmt .)
    REQUIRE         reduce using rule 68 (statement -> return_stmt .)
    INCLUDE         reduce using rule 68 (statement -> return_stmt .)
    CLASS           reduce using rule 68 (statement -> return_stmt .)
    UNSET           reduce using rule 68 (statement -> return_stmt .)
    IF              reduce using rule 68 (statement -> return_stmt .)
    SWITCH          reduce using rule 68 (statement -> return_stmt .)
    CASE            reduce using rule 68 (statement -> return_stmt .)
    DEFAULT         reduce using rule 68 (statement -> return_stmt .)
    FOR             reduce using rule 68 (statement -> return_stmt .)
    WHILE           reduce using rule 68 (statement -> return_stmt .)
    DO              reduce using rule 68 (statement -> return_stmt .)
    ECHO            reduce using rule 68 (statement -> return_stmt .)
    LPAREN          reduce using rule 68 (statement -> return_stmt .)
    NUM             reduce using rule 68 (statement -> return_stmt .)
    TRUE            reduce using rule 68 (statement -> return_stmt .)
    FALSE           reduce using rule 68 (statement -> return_stmt .)
    RBLOCK          reduce using rule 68 (statement -> return_stmt .)
    LBLOCK          reduce using rule 68 (statement -> return_stmt .)
    RETURN          reduce using rule 68 (statement -> return_stmt .)


state 109

    (69) statement -> class_declaration .

    BREAK           reduce using rule 69 (statement -> class_declaration .)
    SEMI            reduce using rule 69 (statement -> class_declaration .)
    ELSE            reduce using rule 69 (statement -> class_declaration .)
    ELSEIF          reduce using rule 69 (statement -> class_declaration .)
    CLOSETAG        reduce using rule 69 (statement -> class_declaration .)
    IDVAR           reduce using rule 69 (statement -> class_declaration .)
    TIMESTIMES      reduce using rule 69 (statement -> class_declaration .)
    AMPERSANT       reduce using rule 69 (statement -> class_declaration .)
    FUNCTION        reduce using rule 69 (statement -> class_declaration .)
    ID              reduce using rule 69 (statement -> class_declaration .)
    PRIVATE         reduce using rule 69 (statement -> class_declaration .)
    PUBLIC          reduce using rule 69 (statement -> class_declaration .)
    PROTECTED       reduce using rule 69 (statement -> class_declaration .)
    REQUIRE         reduce using rule 69 (statement -> class_declaration .)
    INCLUDE         reduce using rule 69 (statement -> class_declaration .)
    CLASS           reduce using rule 69 (statement -> class_declaration .)
    UNSET           reduce using rule 69 (statement -> class_declaration .)
    IF              reduce using rule 69 (statement -> class_declaration .)
    SWITCH          reduce using rule 69 (statement -> class_declaration .)
    CASE            reduce using rule 69 (statement -> class_declaration .)
    DEFAULT         reduce using rule 69 (statement -> class_declaration .)
    FOR             reduce using rule 69 (statement -> class_declaration .)
    WHILE           reduce using rule 69 (statement -> class_declaration .)
    DO              reduce using rule 69 (statement -> class_declaration .)
    ECHO            reduce using rule 69 (statement -> class_declaration .)
    LPAREN          reduce using rule 69 (statement -> class_declaration .)
    NUM             reduce using rule 69 (statement -> class_declaration .)
    TRUE            reduce using rule 69 (statement -> class_declaration .)
    FALSE           reduce using rule 69 (statement -> class_declaration .)
    RBLOCK          reduce using rule 69 (statement -> class_declaration .)
    LBLOCK          reduce using rule 69 (statement -> class_declaration .)
    RETURN          reduce using rule 69 (statement -> class_declaration .)


state 110

    (70) statement -> echo_stmt .
    (15) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (16) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (18) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (19) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (20) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI

  ! shift/reduce conflict for ECHO resolved as shift
    BREAK           reduce using rule 70 (statement -> echo_stmt .)
    SEMI            reduce using rule 70 (statement -> echo_stmt .)
    ELSE            reduce using rule 70 (statement -> echo_stmt .)
    ELSEIF          reduce using rule 70 (statement -> echo_stmt .)
    CLOSETAG        reduce using rule 70 (statement -> echo_stmt .)
    IDVAR           reduce using rule 70 (statement -> echo_stmt .)
    TIMESTIMES      reduce using rule 70 (statement -> echo_stmt .)
    AMPERSANT       reduce using rule 70 (statement -> echo_stmt .)
    FUNCTION        reduce using rule 70 (statement -> echo_stmt .)
    ID              reduce using rule 70 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 70 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 70 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 70 (statement -> echo_stmt .)
    REQUIRE         reduce using rule 70 (statement -> echo_stmt .)
    INCLUDE         reduce using rule 70 (statement -> echo_stmt .)
    CLASS           reduce using rule 70 (statement -> echo_stmt .)
    UNSET           reduce using rule 70 (statement -> echo_stmt .)
    IF              reduce using rule 70 (statement -> echo_stmt .)
    SWITCH          reduce using rule 70 (statement -> echo_stmt .)
    CASE            reduce using rule 70 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 70 (statement -> echo_stmt .)
    FOR             reduce using rule 70 (statement -> echo_stmt .)
    WHILE           reduce using rule 70 (statement -> echo_stmt .)
    DO              reduce using rule 70 (statement -> echo_stmt .)
    LPAREN          reduce using rule 70 (statement -> echo_stmt .)
    NUM             reduce using rule 70 (statement -> echo_stmt .)
    TRUE            reduce using rule 70 (statement -> echo_stmt .)
    FALSE           reduce using rule 70 (statement -> echo_stmt .)
    RBLOCK          reduce using rule 70 (statement -> echo_stmt .)
    LBLOCK          reduce using rule 70 (statement -> echo_stmt .)
    RETURN          reduce using rule 70 (statement -> echo_stmt .)
    ECHO            shift and go to state 40

  ! ECHO            [ reduce using rule 70 (statement -> echo_stmt .) ]


state 111

    (71) expression_stmt -> expression . SEMI
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    SEMI            shift and go to state 170
    AND             shift and go to state 164
    OR              shift and go to state 165


state 112

    (59) compount_stmt -> LBLOCK . echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (125) empty -> .

    ECHO            reduce using rule 125 (empty -> .)
    IDVAR           reduce using rule 125 (empty -> .)
    TIMESTIMES      reduce using rule 125 (empty -> .)
    AMPERSANT       reduce using rule 125 (empty -> .)
    LBLOCK          reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    SWITCH          reduce using rule 125 (empty -> .)
    CASE            reduce using rule 125 (empty -> .)
    DEFAULT         reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    DO              reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    CLASS           reduce using rule 125 (empty -> .)
    PRIVATE         reduce using rule 125 (empty -> .)
    PUBLIC          reduce using rule 125 (empty -> .)
    PROTECTED       reduce using rule 125 (empty -> .)
    LPAREN          reduce using rule 125 (empty -> .)
    NUM             reduce using rule 125 (empty -> .)
    TRUE            reduce using rule 125 (empty -> .)
    FALSE           reduce using rule 125 (empty -> .)
    RBLOCK          reduce using rule 125 (empty -> .)

    echo_stmt                      shift and go to state 171
    empty                          shift and go to state 27

state 113

    (82) return_stmt -> RETURN . SEMI
    (83) return_stmt -> RETURN . expression SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    SEMI            shift and go to state 172
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 173
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 114

    (24) class_declaration -> area . CLASS ID LBLOCK attribute RBLOCK

    CLASS           shift and go to state 39


state 115

    (79) iteration_stmt -> FOR LPAREN var_declaration . expression SEMI additive_expression RPAREN statement
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 174
    additive_expression            shift and go to state 75
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 116

    (80) iteration_stmt -> WHILE LPAREN expression . RPAREN statement
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    RPAREN          shift and go to state 175
    AND             shift and go to state 164
    OR              shift and go to state 165


state 117

    (81) iteration_stmt -> DO LBLOCK statement . SEMI RBLOCK WHILE LPAREN expression RPAREN

    SEMI            shift and go to state 176


state 118

    (24) class_declaration -> area CLASS ID LBLOCK . attribute RBLOCK
    (26) attribute -> . attribute area var_declaration
    (27) attribute -> . area var_declaration
    (28) attribute -> . attribute area fun_declaration
    (29) attribute -> . area fun_declaration
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED

    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23

    area                           shift and go to state 161
    attribute                      shift and go to state 177

state 119

    (15) echo_stmt -> echo_stmt ECHO STRING SEMI .

    ECHO            reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    CLOSETAG        reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    IDVAR           reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    TIMESTIMES      reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    AMPERSANT       reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    FUNCTION        reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    ID              reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    PRIVATE         reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    PUBLIC          reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    PROTECTED       reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    REQUIRE         reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    INCLUDE         reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    CLASS           reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    UNSET           reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    IF              reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    SWITCH          reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    CASE            reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    DEFAULT         reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    FOR             reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    WHILE           reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    DO              reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    BREAK           reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    SEMI            reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    LBLOCK          reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    RETURN          reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    LPAREN          reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    NUM             reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    TRUE            reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    FALSE           reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    RBLOCK          reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    ELSE            reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    ELSEIF          reduce using rule 15 (echo_stmt -> echo_stmt ECHO STRING SEMI .)


state 120

    (16) echo_stmt -> echo_stmt ECHO IDVAR SEMI .

    ECHO            reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    CLOSETAG        reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    IDVAR           reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    TIMESTIMES      reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    AMPERSANT       reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    FUNCTION        reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    ID              reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    PRIVATE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    PUBLIC          reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    PROTECTED       reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    REQUIRE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    INCLUDE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    CLASS           reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    UNSET           reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    IF              reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    SWITCH          reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    CASE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    DEFAULT         reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    FOR             reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    WHILE           reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    DO              reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    BREAK           reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    SEMI            reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    LBLOCK          reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    RETURN          reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    LPAREN          reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    NUM             reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    TRUE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    FALSE           reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    RBLOCK          reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    ELSE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    ELSEIF          reduce using rule 16 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)


state 121

    (18) echo_stmt -> echo_stmt ECHO NUM SEMI .

    ECHO            reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    CLOSETAG        reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    IDVAR           reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    TIMESTIMES      reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    AMPERSANT       reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    FUNCTION        reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    ID              reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    PRIVATE         reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    PUBLIC          reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    PROTECTED       reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    REQUIRE         reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    INCLUDE         reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    CLASS           reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    UNSET           reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    IF              reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    SWITCH          reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    CASE            reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    DEFAULT         reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    FOR             reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    WHILE           reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    DO              reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    BREAK           reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    SEMI            reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    LBLOCK          reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    RETURN          reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    LPAREN          reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    NUM             reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    TRUE            reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    FALSE           reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    RBLOCK          reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    ELSE            reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    ELSEIF          reduce using rule 18 (echo_stmt -> echo_stmt ECHO NUM SEMI .)


state 122

    (19) echo_stmt -> echo_stmt ECHO boolean SEMI .

    ECHO            reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    CLOSETAG        reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    IDVAR           reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    TIMESTIMES      reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    AMPERSANT       reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    FUNCTION        reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    ID              reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    PRIVATE         reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    PUBLIC          reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    PROTECTED       reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    REQUIRE         reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    INCLUDE         reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    CLASS           reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    UNSET           reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    IF              reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    SWITCH          reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    CASE            reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    DEFAULT         reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    FOR             reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    WHILE           reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    DO              reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    BREAK           reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    SEMI            reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    LBLOCK          reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    RETURN          reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    LPAREN          reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    NUM             reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    TRUE            reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    FALSE           reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    RBLOCK          reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    ELSE            reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    ELSEIF          reduce using rule 19 (echo_stmt -> echo_stmt ECHO boolean SEMI .)


state 123

    (20) echo_stmt -> echo_stmt ECHO fun_declaration SEMI .

    ECHO            reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    CLOSETAG        reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    IDVAR           reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    TIMESTIMES      reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    AMPERSANT       reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    FUNCTION        reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    ID              reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    PRIVATE         reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    PUBLIC          reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    PROTECTED       reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    REQUIRE         reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    INCLUDE         reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    CLASS           reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    UNSET           reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    IF              reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    SWITCH          reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    CASE            reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    DEFAULT         reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    FOR             reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    WHILE           reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    DO              reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    BREAK           reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    SEMI            reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    LBLOCK          reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    RETURN          reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    LPAREN          reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    NUM             reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    TRUE            reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    FALSE           reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    RBLOCK          reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    ELSE            reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    ELSEIF          reduce using rule 20 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)


state 124

    (43) var_declaration -> IDVAR EQUAL IDVAR SEMI . var_declaration
    (44) var_declaration -> IDVAR EQUAL IDVAR SEMI .
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    IDVAR           reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    TIMESTIMES      reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    AMPERSANT       reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    FUNCTION        reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    ID              reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    PRIVATE         reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    PUBLIC          reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    PROTECTED       reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    REQUIRE         reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    INCLUDE         reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    CLASS           reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    UNSET           reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    IF              reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    SWITCH          reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    CASE            reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    DEFAULT         reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    FOR             reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    WHILE           reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    DO              reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    ECHO            reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    LPAREN          reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    NUM             reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    TRUE            reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    FALSE           reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    RBLOCK          reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    LBLOCK          reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    RETURN          reduce using rule 44 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 17 ]
  ! AMPERSANT       [ shift and go to state 18 ]

    var_declaration                shift and go to state 178

state 125

    (114) factor -> IDVAR LPAREN . args RPAREN
    (115) args -> . args_list
    (116) args -> . empty
    (117) args -> . VOID
    (118) args_list -> . args_list COMMA expression
    (119) args_list -> . expression
    (125) empty -> .
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VOID            shift and go to state 182
    RPAREN          reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    args                           shift and go to state 179
    args_list                      shift and go to state 180
    empty                          shift and go to state 181
    expression                     shift and go to state 183
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 126

    (90) var -> IDVAR LBRACKET . expression RBRACKET
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 184
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 127

    (37) var_declaration -> IDVAR EQUAL NUM SEMI . var_declaration
    (38) var_declaration -> IDVAR EQUAL NUM SEMI .
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    IDVAR           reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    TIMESTIMES      reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    AMPERSANT       reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    FUNCTION        reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    ID              reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    PRIVATE         reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    PUBLIC          reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    PROTECTED       reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    REQUIRE         reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    INCLUDE         reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    CLASS           reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    UNSET           reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    IF              reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    SWITCH          reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    CASE            reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    DEFAULT         reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    FOR             reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    WHILE           reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    DO              reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    ECHO            reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    LPAREN          reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    NUM             reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    TRUE            reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    FALSE           reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    RBLOCK          reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    LBLOCK          reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    RETURN          reduce using rule 38 (var_declaration -> IDVAR EQUAL NUM SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 17 ]
  ! AMPERSANT       [ shift and go to state 18 ]

    var_declaration                shift and go to state 185

state 128

    (39) var_declaration -> IDVAR EQUAL NULL SEMI . var_declaration
    (40) var_declaration -> IDVAR EQUAL NULL SEMI .
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    IDVAR           reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    TIMESTIMES      reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    AMPERSANT       reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    FUNCTION        reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    ID              reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    PRIVATE         reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    PUBLIC          reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    PROTECTED       reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    REQUIRE         reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    INCLUDE         reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    CLASS           reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    UNSET           reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    IF              reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    SWITCH          reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    CASE            reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    DEFAULT         reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    FOR             reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    WHILE           reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    DO              reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    ECHO            reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    LPAREN          reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    NUM             reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    TRUE            reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    FALSE           reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    RBLOCK          reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    LBLOCK          reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)
    RETURN          reduce using rule 40 (var_declaration -> IDVAR EQUAL NULL SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 17 ]
  ! AMPERSANT       [ shift and go to state 18 ]

    var_declaration                shift and go to state 186

state 129

    (41) var_declaration -> IDVAR EQUAL boolean SEMI . var_declaration
    (42) var_declaration -> IDVAR EQUAL boolean SEMI .
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    IDVAR           reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    TIMESTIMES      reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    AMPERSANT       reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    FUNCTION        reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    ID              reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    PRIVATE         reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    PUBLIC          reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    PROTECTED       reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    REQUIRE         reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    INCLUDE         reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    CLASS           reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    UNSET           reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    IF              reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    SWITCH          reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    CASE            reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    DEFAULT         reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    FOR             reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    WHILE           reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    DO              reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    ECHO            reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    LPAREN          reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    NUM             reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    TRUE            reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    FALSE           reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    RBLOCK          reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    LBLOCK          reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    RETURN          reduce using rule 42 (var_declaration -> IDVAR EQUAL boolean SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 17 ]
  ! AMPERSANT       [ shift and go to state 18 ]

    var_declaration                shift and go to state 187

state 130

    (47) var_declaration -> IDVAR EQUAL AMPERSANT IDVAR . SEMI

    SEMI            shift and go to state 188


state 131

    (48) var_declaration -> IDVAR EQUAL STRING SEMI .

    CLOSETAG        reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    IDVAR           reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    TIMESTIMES      reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    AMPERSANT       reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    FUNCTION        reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    ID              reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    PRIVATE         reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    PUBLIC          reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    PROTECTED       reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    REQUIRE         reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    INCLUDE         reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    CLASS           reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    UNSET           reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    IF              reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    SWITCH          reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    CASE            reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    DEFAULT         reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    FOR             reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    WHILE           reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    DO              reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    ECHO            reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    LPAREN          reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    NUM             reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    TRUE            reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    FALSE           reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    RBLOCK          reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    LBLOCK          reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)
    RETURN          reduce using rule 48 (var_declaration -> IDVAR EQUAL STRING SEMI .)


state 132

    (50) var_declaration -> IDVAR EQUAL simple_expression SEMI .

    CLOSETAG        reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    IDVAR           reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    TIMESTIMES      reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    AMPERSANT       reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    FUNCTION        reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    ID              reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    PRIVATE         reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    PUBLIC          reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    PROTECTED       reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    REQUIRE         reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    INCLUDE         reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    CLASS           reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    UNSET           reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    IF              reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    SWITCH          reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    CASE            reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    DEFAULT         reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    FOR             reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    WHILE           reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    DO              reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    ECHO            reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    LPAREN          reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    NUM             reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    TRUE            reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    FALSE           reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    RBLOCK          reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    LBLOCK          reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    RETURN          reduce using rule 50 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)


state 133

    (91) simple_expression -> additive_expression relop . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    IDVAR           shift and go to state 190
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    additive_expression            shift and go to state 189
    term                           shift and go to state 76
    factor                         shift and go to state 77
    var                            shift and go to state 79
    boolean                        shift and go to state 99

state 134

    (100) additive_expression -> additive_expression addop . term
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    IDVAR           shift and go to state 190
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    term                           shift and go to state 191
    factor                         shift and go to state 77
    var                            shift and go to state 79
    boolean                        shift and go to state 99

state 135

    (93) relop -> LESS .

    LPAREN          reduce using rule 93 (relop -> LESS .)
    NUM             reduce using rule 93 (relop -> LESS .)
    IDVAR           reduce using rule 93 (relop -> LESS .)
    TRUE            reduce using rule 93 (relop -> LESS .)
    FALSE           reduce using rule 93 (relop -> LESS .)


state 136

    (94) relop -> LESSEQUAL .

    LPAREN          reduce using rule 94 (relop -> LESSEQUAL .)
    NUM             reduce using rule 94 (relop -> LESSEQUAL .)
    IDVAR           reduce using rule 94 (relop -> LESSEQUAL .)
    TRUE            reduce using rule 94 (relop -> LESSEQUAL .)
    FALSE           reduce using rule 94 (relop -> LESSEQUAL .)


state 137

    (95) relop -> GREATER .

    LPAREN          reduce using rule 95 (relop -> GREATER .)
    NUM             reduce using rule 95 (relop -> GREATER .)
    IDVAR           reduce using rule 95 (relop -> GREATER .)
    TRUE            reduce using rule 95 (relop -> GREATER .)
    FALSE           reduce using rule 95 (relop -> GREATER .)


state 138

    (96) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 96 (relop -> GREATEREQUAL .)
    NUM             reduce using rule 96 (relop -> GREATEREQUAL .)
    IDVAR           reduce using rule 96 (relop -> GREATEREQUAL .)
    TRUE            reduce using rule 96 (relop -> GREATEREQUAL .)
    FALSE           reduce using rule 96 (relop -> GREATEREQUAL .)


state 139

    (97) relop -> DEQUAL .

    LPAREN          reduce using rule 97 (relop -> DEQUAL .)
    NUM             reduce using rule 97 (relop -> DEQUAL .)
    IDVAR           reduce using rule 97 (relop -> DEQUAL .)
    TRUE            reduce using rule 97 (relop -> DEQUAL .)
    FALSE           reduce using rule 97 (relop -> DEQUAL .)


state 140

    (98) relop -> DISTINT .

    LPAREN          reduce using rule 98 (relop -> DISTINT .)
    NUM             reduce using rule 98 (relop -> DISTINT .)
    IDVAR           reduce using rule 98 (relop -> DISTINT .)
    TRUE            reduce using rule 98 (relop -> DISTINT .)
    FALSE           reduce using rule 98 (relop -> DISTINT .)


state 141

    (99) relop -> ISEQUAL .

    LPAREN          reduce using rule 99 (relop -> ISEQUAL .)
    NUM             reduce using rule 99 (relop -> ISEQUAL .)
    IDVAR           reduce using rule 99 (relop -> ISEQUAL .)
    TRUE            reduce using rule 99 (relop -> ISEQUAL .)
    FALSE           reduce using rule 99 (relop -> ISEQUAL .)


state 142

    (104) addop -> PLUS .

    LPAREN          reduce using rule 104 (addop -> PLUS .)
    NUM             reduce using rule 104 (addop -> PLUS .)
    IDVAR           reduce using rule 104 (addop -> PLUS .)
    TRUE            reduce using rule 104 (addop -> PLUS .)
    FALSE           reduce using rule 104 (addop -> PLUS .)


state 143

    (105) addop -> MINUS .

    LPAREN          reduce using rule 105 (addop -> MINUS .)
    NUM             reduce using rule 105 (addop -> MINUS .)
    IDVAR           reduce using rule 105 (addop -> MINUS .)
    TRUE            reduce using rule 105 (addop -> MINUS .)
    FALSE           reduce using rule 105 (addop -> MINUS .)


state 144

    (102) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    DISTINT         reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    SEMI            reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    AND             reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    OR              reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 102 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 102 (additive_expression -> term MINUSMINUS .)


state 145

    (103) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    DISTINT         reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    SEMI            reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    AND             reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    OR              reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 103 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 103 (additive_expression -> term PLUSPLUS .)


state 146

    (106) term -> term mulop . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    IDVAR           shift and go to state 190
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    factor                         shift and go to state 192
    var                            shift and go to state 79
    boolean                        shift and go to state 99

state 147

    (108) mulop -> TIMES .

    LPAREN          reduce using rule 108 (mulop -> TIMES .)
    NUM             reduce using rule 108 (mulop -> TIMES .)
    IDVAR           reduce using rule 108 (mulop -> TIMES .)
    TRUE            reduce using rule 108 (mulop -> TIMES .)
    FALSE           reduce using rule 108 (mulop -> TIMES .)


state 148

    (109) mulop -> DIVIDE .

    LPAREN          reduce using rule 109 (mulop -> DIVIDE .)
    NUM             reduce using rule 109 (mulop -> DIVIDE .)
    IDVAR           reduce using rule 109 (mulop -> DIVIDE .)
    TRUE            reduce using rule 109 (mulop -> DIVIDE .)
    FALSE           reduce using rule 109 (mulop -> DIVIDE .)


state 149

    (110) factor -> LPAREN expression . RPAREN
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    RPAREN          shift and go to state 193
    AND             shift and go to state 164
    OR              shift and go to state 165


state 150

    (36) var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .

    CLOSETAG        reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    IDVAR           reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    TIMESTIMES      reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    AMPERSANT       reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    FUNCTION        reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    ID              reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    PRIVATE         reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    PUBLIC          reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    PROTECTED       reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    REQUIRE         reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    INCLUDE         reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    CLASS           reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    UNSET           reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    IF              reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    SWITCH          reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    CASE            reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    DEFAULT         reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    FOR             reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    WHILE           reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    DO              reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    ECHO            reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    LPAREN          reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    NUM             reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    TRUE            reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    FALSE           reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    RBLOCK          reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    LBLOCK          reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    RETURN          reduce using rule 36 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)


state 151

    (45) var_declaration -> AMPERSANT IDVAR SEMI var_declaration .

    CLOSETAG        reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    IDVAR           reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    TIMESTIMES      reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    AMPERSANT       reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    FUNCTION        reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    ID              reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    PRIVATE         reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    PUBLIC          reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    PROTECTED       reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    REQUIRE         reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    INCLUDE         reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    CLASS           reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    UNSET           reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    IF              reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    SWITCH          reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    CASE            reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    DEFAULT         reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    FOR             reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    WHILE           reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    DO              reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    ECHO            reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    LPAREN          reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    NUM             reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    TRUE            reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    FALSE           reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    RBLOCK          reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    LBLOCK          reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    RETURN          reduce using rule 45 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)


state 152

    (46) var_declaration -> AMPERSANT IDVAR EQUAL IDVAR . SEMI selection_stmt

    SEMI            shift and go to state 194


state 153

    (51) fun_declaration -> FUNCTION ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 195


state 154

    (52) fun_call -> ID LPAREN params RPAREN . SEMI

    SEMI            shift and go to state 196


state 155

    (55) param_list -> param_list COMMA . param_list
    (55) param_list -> . param_list COMMA param_list
    (56) param_list -> . param
    (57) param -> . IDVAR
    (58) param -> . IDVAR LBRACKET RBRACKET

    IDVAR           shift and go to state 88

    param_list                     shift and go to state 197
    param                          shift and go to state 87

state 156

    (58) param -> IDVAR LBRACKET . RBRACKET

    RBRACKET        shift and go to state 198


state 157

    (122) typeclass -> ID IDVAR EQUAL NEW . constructor SEMI
    (123) constructor -> . ID LPAREN RPAREN
    (124) constructor -> . ID LPAREN args RPAREN

    ID              shift and go to state 199

    constructor                    shift and go to state 200

state 158

    (22) header_declaration -> REQUIRE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 201


state 159

    (23) header_declaration -> INCLUDE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 202


state 160

    (25) class_declaration -> CLASS ID LBLOCK attribute . RBLOCK
    (26) attribute -> attribute . area var_declaration
    (28) attribute -> attribute . area fun_declaration
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED

    RBLOCK          shift and go to state 203
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23

    area                           shift and go to state 204

state 161

    (27) attribute -> area . var_declaration
    (29) attribute -> area . fun_declaration
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (51) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 17
    AMPERSANT       shift and go to state 18
    FUNCTION        shift and go to state 19

    var_declaration                shift and go to state 205
    fun_declaration                shift and go to state 206

state 162

    (21) unset_stmt -> UNSET LPAREN IDVAR RPAREN . SEMI

    SEMI            shift and go to state 207


state 163

    (72) selection_stmt -> IF LPAREN expression RPAREN . statement
    (73) selection_stmt -> IF LPAREN expression RPAREN . statement selection
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (125) empty -> .
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    ECHO            reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    ELSEIF          reduce using rule 125 (empty -> .)
    CLOSETAG        reduce using rule 125 (empty -> .)
    TIMESTIMES      reduce using rule 125 (empty -> .)
    AMPERSANT       reduce using rule 125 (empty -> .)
    FUNCTION        reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    REQUIRE         reduce using rule 125 (empty -> .)
    INCLUDE         reduce using rule 125 (empty -> .)
    UNSET           reduce using rule 125 (empty -> .)
    BREAK           reduce using rule 125 (empty -> .)
    SEMI            reduce using rule 125 (empty -> .)
    RBLOCK          reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

  ! IDVAR           [ reduce using rule 125 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 125 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 125 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 125 (empty -> .) ]
  ! CLASS           [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! SWITCH          [ reduce using rule 125 (empty -> .) ]
  ! CASE            [ reduce using rule 125 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! DO              [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! NUM             [ reduce using rule 125 (empty -> .) ]
  ! TRUE            [ reduce using rule 125 (empty -> .) ]
  ! FALSE           [ reduce using rule 125 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 111
    statement                      shift and go to state 208
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    echo_stmt                      shift and go to state 110
    var                            shift and go to state 95
    additive_expression            shift and go to state 75
    area                           shift and go to state 114
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 164

    (87) expression -> expression AND . expression
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 209
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 165

    (88) expression -> expression OR . expression
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 210
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 166

    (84) expression -> var EQUAL . expression
    (86) expression -> var EQUAL . AMPERSANT IDVAR
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    AMPERSANT       shift and go to state 212
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    var                            shift and go to state 95
    expression                     shift and go to state 211
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 167

    (76) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (125) empty -> .
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    ECHO            reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    ELSEIF          reduce using rule 125 (empty -> .)
    CLOSETAG        reduce using rule 125 (empty -> .)
    TIMESTIMES      reduce using rule 125 (empty -> .)
    AMPERSANT       reduce using rule 125 (empty -> .)
    FUNCTION        reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    REQUIRE         reduce using rule 125 (empty -> .)
    INCLUDE         reduce using rule 125 (empty -> .)
    UNSET           reduce using rule 125 (empty -> .)
    BREAK           reduce using rule 125 (empty -> .)
    SEMI            reduce using rule 125 (empty -> .)
    RBLOCK          reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

  ! IDVAR           [ reduce using rule 125 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 125 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 125 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 125 (empty -> .) ]
  ! CLASS           [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! SWITCH          [ reduce using rule 125 (empty -> .) ]
  ! CASE            [ reduce using rule 125 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! DO              [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! NUM             [ reduce using rule 125 (empty -> .) ]
  ! TRUE            [ reduce using rule 125 (empty -> .) ]
  ! FALSE           [ reduce using rule 125 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]

    var                            shift and go to state 95
    statement                      shift and go to state 213
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    echo_stmt                      shift and go to state 110
    expression                     shift and go to state 111
    additive_expression            shift and go to state 75
    area                           shift and go to state 114
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 168

    (77) selection_stmt -> CASE NUM COLON statement . BREAK SEMI

    BREAK           shift and go to state 214


state 169

    (78) selection_stmt -> DEFAULT COLON statement BREAK . SEMI

    SEMI            shift and go to state 215


state 170

    (71) expression_stmt -> expression SEMI .

    BREAK           reduce using rule 71 (expression_stmt -> expression SEMI .)
    SEMI            reduce using rule 71 (expression_stmt -> expression SEMI .)
    ELSE            reduce using rule 71 (expression_stmt -> expression SEMI .)
    ELSEIF          reduce using rule 71 (expression_stmt -> expression SEMI .)
    CLOSETAG        reduce using rule 71 (expression_stmt -> expression SEMI .)
    IDVAR           reduce using rule 71 (expression_stmt -> expression SEMI .)
    TIMESTIMES      reduce using rule 71 (expression_stmt -> expression SEMI .)
    AMPERSANT       reduce using rule 71 (expression_stmt -> expression SEMI .)
    FUNCTION        reduce using rule 71 (expression_stmt -> expression SEMI .)
    ID              reduce using rule 71 (expression_stmt -> expression SEMI .)
    PRIVATE         reduce using rule 71 (expression_stmt -> expression SEMI .)
    PUBLIC          reduce using rule 71 (expression_stmt -> expression SEMI .)
    PROTECTED       reduce using rule 71 (expression_stmt -> expression SEMI .)
    REQUIRE         reduce using rule 71 (expression_stmt -> expression SEMI .)
    INCLUDE         reduce using rule 71 (expression_stmt -> expression SEMI .)
    CLASS           reduce using rule 71 (expression_stmt -> expression SEMI .)
    UNSET           reduce using rule 71 (expression_stmt -> expression SEMI .)
    IF              reduce using rule 71 (expression_stmt -> expression SEMI .)
    SWITCH          reduce using rule 71 (expression_stmt -> expression SEMI .)
    CASE            reduce using rule 71 (expression_stmt -> expression SEMI .)
    DEFAULT         reduce using rule 71 (expression_stmt -> expression SEMI .)
    FOR             reduce using rule 71 (expression_stmt -> expression SEMI .)
    WHILE           reduce using rule 71 (expression_stmt -> expression SEMI .)
    DO              reduce using rule 71 (expression_stmt -> expression SEMI .)
    ECHO            reduce using rule 71 (expression_stmt -> expression SEMI .)
    LPAREN          reduce using rule 71 (expression_stmt -> expression SEMI .)
    NUM             reduce using rule 71 (expression_stmt -> expression SEMI .)
    TRUE            reduce using rule 71 (expression_stmt -> expression SEMI .)
    FALSE           reduce using rule 71 (expression_stmt -> expression SEMI .)
    RBLOCK          reduce using rule 71 (expression_stmt -> expression SEMI .)
    LBLOCK          reduce using rule 71 (expression_stmt -> expression SEMI .)
    RETURN          reduce using rule 71 (expression_stmt -> expression SEMI .)


state 171

    (59) compount_stmt -> LBLOCK echo_stmt . local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (15) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (16) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (18) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (19) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (20) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI
    (60) local_declarations -> . local_declarations var_declaration
    (61) local_declarations -> . empty
    (125) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 40
    IDVAR           reduce using rule 125 (empty -> .)
    TIMESTIMES      reduce using rule 125 (empty -> .)
    AMPERSANT       reduce using rule 125 (empty -> .)
    LBLOCK          reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    SWITCH          reduce using rule 125 (empty -> .)
    CASE            reduce using rule 125 (empty -> .)
    DEFAULT         reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    DO              reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    CLASS           reduce using rule 125 (empty -> .)
    PRIVATE         reduce using rule 125 (empty -> .)
    PUBLIC          reduce using rule 125 (empty -> .)
    PROTECTED       reduce using rule 125 (empty -> .)
    LPAREN          reduce using rule 125 (empty -> .)
    NUM             reduce using rule 125 (empty -> .)
    TRUE            reduce using rule 125 (empty -> .)
    FALSE           reduce using rule 125 (empty -> .)
    RBLOCK          reduce using rule 125 (empty -> .)

  ! ECHO            [ reduce using rule 125 (empty -> .) ]

    local_declarations             shift and go to state 216
    empty                          shift and go to state 217

state 172

    (82) return_stmt -> RETURN SEMI .

    BREAK           reduce using rule 82 (return_stmt -> RETURN SEMI .)
    SEMI            reduce using rule 82 (return_stmt -> RETURN SEMI .)
    ELSE            reduce using rule 82 (return_stmt -> RETURN SEMI .)
    ELSEIF          reduce using rule 82 (return_stmt -> RETURN SEMI .)
    CLOSETAG        reduce using rule 82 (return_stmt -> RETURN SEMI .)
    IDVAR           reduce using rule 82 (return_stmt -> RETURN SEMI .)
    TIMESTIMES      reduce using rule 82 (return_stmt -> RETURN SEMI .)
    AMPERSANT       reduce using rule 82 (return_stmt -> RETURN SEMI .)
    FUNCTION        reduce using rule 82 (return_stmt -> RETURN SEMI .)
    ID              reduce using rule 82 (return_stmt -> RETURN SEMI .)
    PRIVATE         reduce using rule 82 (return_stmt -> RETURN SEMI .)
    PUBLIC          reduce using rule 82 (return_stmt -> RETURN SEMI .)
    PROTECTED       reduce using rule 82 (return_stmt -> RETURN SEMI .)
    REQUIRE         reduce using rule 82 (return_stmt -> RETURN SEMI .)
    INCLUDE         reduce using rule 82 (return_stmt -> RETURN SEMI .)
    CLASS           reduce using rule 82 (return_stmt -> RETURN SEMI .)
    UNSET           reduce using rule 82 (return_stmt -> RETURN SEMI .)
    IF              reduce using rule 82 (return_stmt -> RETURN SEMI .)
    SWITCH          reduce using rule 82 (return_stmt -> RETURN SEMI .)
    CASE            reduce using rule 82 (return_stmt -> RETURN SEMI .)
    DEFAULT         reduce using rule 82 (return_stmt -> RETURN SEMI .)
    FOR             reduce using rule 82 (return_stmt -> RETURN SEMI .)
    WHILE           reduce using rule 82 (return_stmt -> RETURN SEMI .)
    DO              reduce using rule 82 (return_stmt -> RETURN SEMI .)
    ECHO            reduce using rule 82 (return_stmt -> RETURN SEMI .)
    LPAREN          reduce using rule 82 (return_stmt -> RETURN SEMI .)
    NUM             reduce using rule 82 (return_stmt -> RETURN SEMI .)
    TRUE            reduce using rule 82 (return_stmt -> RETURN SEMI .)
    FALSE           reduce using rule 82 (return_stmt -> RETURN SEMI .)
    RBLOCK          reduce using rule 82 (return_stmt -> RETURN SEMI .)
    LBLOCK          reduce using rule 82 (return_stmt -> RETURN SEMI .)
    RETURN          reduce using rule 82 (return_stmt -> RETURN SEMI .)


state 173

    (83) return_stmt -> RETURN expression . SEMI
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    SEMI            shift and go to state 218
    AND             shift and go to state 164
    OR              shift and go to state 165


state 174

    (79) iteration_stmt -> FOR LPAREN var_declaration expression . SEMI additive_expression RPAREN statement
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    SEMI            shift and go to state 219
    AND             shift and go to state 164
    OR              shift and go to state 165


state 175

    (80) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (125) empty -> .
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    ECHO            reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    ELSEIF          reduce using rule 125 (empty -> .)
    CLOSETAG        reduce using rule 125 (empty -> .)
    TIMESTIMES      reduce using rule 125 (empty -> .)
    AMPERSANT       reduce using rule 125 (empty -> .)
    FUNCTION        reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    REQUIRE         reduce using rule 125 (empty -> .)
    INCLUDE         reduce using rule 125 (empty -> .)
    UNSET           reduce using rule 125 (empty -> .)
    BREAK           reduce using rule 125 (empty -> .)
    SEMI            reduce using rule 125 (empty -> .)
    RBLOCK          reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

  ! IDVAR           [ reduce using rule 125 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 125 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 125 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 125 (empty -> .) ]
  ! CLASS           [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! SWITCH          [ reduce using rule 125 (empty -> .) ]
  ! CASE            [ reduce using rule 125 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! DO              [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! NUM             [ reduce using rule 125 (empty -> .) ]
  ! TRUE            [ reduce using rule 125 (empty -> .) ]
  ! FALSE           [ reduce using rule 125 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 111
    statement                      shift and go to state 220
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    echo_stmt                      shift and go to state 110
    var                            shift and go to state 95
    additive_expression            shift and go to state 75
    area                           shift and go to state 114
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 176

    (81) iteration_stmt -> DO LBLOCK statement SEMI . RBLOCK WHILE LPAREN expression RPAREN

    RBLOCK          shift and go to state 221


state 177

    (24) class_declaration -> area CLASS ID LBLOCK attribute . RBLOCK
    (26) attribute -> attribute . area var_declaration
    (28) attribute -> attribute . area fun_declaration
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED

    RBLOCK          shift and go to state 222
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23

    area                           shift and go to state 204

state 178

    (43) var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .

    CLOSETAG        reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    IDVAR           reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    TIMESTIMES      reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    AMPERSANT       reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    FUNCTION        reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    ID              reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    PRIVATE         reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    PUBLIC          reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    PROTECTED       reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    REQUIRE         reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    INCLUDE         reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    CLASS           reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    UNSET           reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    IF              reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    SWITCH          reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    CASE            reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    DEFAULT         reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    FOR             reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    WHILE           reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    DO              reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    ECHO            reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    LPAREN          reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    NUM             reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    TRUE            reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    FALSE           reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    RBLOCK          reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    LBLOCK          reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    RETURN          reduce using rule 43 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)


state 179

    (114) factor -> IDVAR LPAREN args . RPAREN

    RPAREN          shift and go to state 223


state 180

    (115) args -> args_list .
    (118) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 115 (args -> args_list .)
    COMMA           shift and go to state 224


state 181

    (116) args -> empty .

    RPAREN          reduce using rule 116 (args -> empty .)


state 182

    (117) args -> VOID .

    RPAREN          reduce using rule 117 (args -> VOID .)


state 183

    (119) args_list -> expression .
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    COMMA           reduce using rule 119 (args_list -> expression .)
    RPAREN          reduce using rule 119 (args_list -> expression .)
    AND             shift and go to state 164
    OR              shift and go to state 165


state 184

    (90) var -> IDVAR LBRACKET expression . RBRACKET
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    RBRACKET        shift and go to state 225
    AND             shift and go to state 164
    OR              shift and go to state 165


state 185

    (37) var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .

    CLOSETAG        reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    IDVAR           reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    TIMESTIMES      reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    AMPERSANT       reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    FUNCTION        reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    ID              reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    PRIVATE         reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    PUBLIC          reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    PROTECTED       reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    REQUIRE         reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    INCLUDE         reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    CLASS           reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    UNSET           reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    IF              reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    SWITCH          reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    CASE            reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    DEFAULT         reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    FOR             reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    WHILE           reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    DO              reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    ECHO            reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    LPAREN          reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    NUM             reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    TRUE            reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    FALSE           reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    RBLOCK          reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    LBLOCK          reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    RETURN          reduce using rule 37 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)


state 186

    (39) var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .

    CLOSETAG        reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    IDVAR           reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    TIMESTIMES      reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    AMPERSANT       reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    FUNCTION        reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    ID              reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    PRIVATE         reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    PUBLIC          reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    PROTECTED       reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    REQUIRE         reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    INCLUDE         reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    CLASS           reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    UNSET           reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    IF              reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    SWITCH          reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    CASE            reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    DEFAULT         reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    FOR             reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    WHILE           reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    DO              reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    ECHO            reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    LPAREN          reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    NUM             reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    TRUE            reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    FALSE           reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    RBLOCK          reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    LBLOCK          reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)
    RETURN          reduce using rule 39 (var_declaration -> IDVAR EQUAL NULL SEMI var_declaration .)


state 187

    (41) var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .

    CLOSETAG        reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    IDVAR           reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    TIMESTIMES      reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    AMPERSANT       reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    FUNCTION        reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    ID              reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    PRIVATE         reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    PUBLIC          reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    PROTECTED       reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    REQUIRE         reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    INCLUDE         reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    CLASS           reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    UNSET           reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    IF              reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    SWITCH          reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    CASE            reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    DEFAULT         reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    FOR             reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    WHILE           reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    DO              reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    ECHO            reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    LPAREN          reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    NUM             reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    TRUE            reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    FALSE           reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    RBLOCK          reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    LBLOCK          reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    RETURN          reduce using rule 41 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)


state 188

    (47) var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .

    CLOSETAG        reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    IDVAR           reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    TIMESTIMES      reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    AMPERSANT       reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    FUNCTION        reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    ID              reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    PRIVATE         reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    PUBLIC          reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    PROTECTED       reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    REQUIRE         reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    INCLUDE         reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    CLASS           reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    UNSET           reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    IF              reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    SWITCH          reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    CASE            reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    DEFAULT         reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    FOR             reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    WHILE           reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    DO              reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    ECHO            reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    LPAREN          reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    NUM             reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    TRUE            reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    FALSE           reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    RBLOCK          reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    LBLOCK          reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)
    RETURN          reduce using rule 47 (var_declaration -> IDVAR EQUAL AMPERSANT IDVAR SEMI .)


state 189

    (91) simple_expression -> additive_expression relop additive_expression .
    (100) additive_expression -> additive_expression . addop term
    (104) addop -> . PLUS
    (105) addop -> . MINUS

    SEMI            reduce using rule 91 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 91 (simple_expression -> additive_expression relop additive_expression .)
    AND             reduce using rule 91 (simple_expression -> additive_expression relop additive_expression .)
    OR              reduce using rule 91 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 91 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 91 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

    addop                          shift and go to state 134

state 190

    (114) factor -> IDVAR . LPAREN args RPAREN
    (89) var -> IDVAR .
    (90) var -> IDVAR . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 125
    MINUSMINUS      reduce using rule 89 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 89 (var -> IDVAR .)
    TIMES           reduce using rule 89 (var -> IDVAR .)
    DIVIDE          reduce using rule 89 (var -> IDVAR .)
    PLUS            reduce using rule 89 (var -> IDVAR .)
    MINUS           reduce using rule 89 (var -> IDVAR .)
    SEMI            reduce using rule 89 (var -> IDVAR .)
    RPAREN          reduce using rule 89 (var -> IDVAR .)
    AND             reduce using rule 89 (var -> IDVAR .)
    OR              reduce using rule 89 (var -> IDVAR .)
    COMMA           reduce using rule 89 (var -> IDVAR .)
    RBRACKET        reduce using rule 89 (var -> IDVAR .)
    LESS            reduce using rule 89 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 89 (var -> IDVAR .)
    GREATER         reduce using rule 89 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 89 (var -> IDVAR .)
    DEQUAL          reduce using rule 89 (var -> IDVAR .)
    DISTINT         reduce using rule 89 (var -> IDVAR .)
    ISEQUAL         reduce using rule 89 (var -> IDVAR .)
    LBRACKET        shift and go to state 126


state 191

    (100) additive_expression -> additive_expression addop term .
    (106) term -> term . mulop factor
    (108) mulop -> . TIMES
    (109) mulop -> . DIVIDE

    LESS            reduce using rule 100 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 100 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 100 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 100 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 100 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 100 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 100 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 100 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 100 (additive_expression -> additive_expression addop term .)
    SEMI            reduce using rule 100 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 100 (additive_expression -> additive_expression addop term .)
    AND             reduce using rule 100 (additive_expression -> additive_expression addop term .)
    OR              reduce using rule 100 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 100 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 100 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 147
    DIVIDE          shift and go to state 148

    mulop                          shift and go to state 146

state 192

    (106) term -> term mulop factor .

    MINUSMINUS      reduce using rule 106 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 106 (term -> term mulop factor .)
    TIMES           reduce using rule 106 (term -> term mulop factor .)
    DIVIDE          reduce using rule 106 (term -> term mulop factor .)
    LESS            reduce using rule 106 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 106 (term -> term mulop factor .)
    GREATER         reduce using rule 106 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 106 (term -> term mulop factor .)
    DEQUAL          reduce using rule 106 (term -> term mulop factor .)
    DISTINT         reduce using rule 106 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 106 (term -> term mulop factor .)
    PLUS            reduce using rule 106 (term -> term mulop factor .)
    MINUS           reduce using rule 106 (term -> term mulop factor .)
    SEMI            reduce using rule 106 (term -> term mulop factor .)
    RPAREN          reduce using rule 106 (term -> term mulop factor .)
    AND             reduce using rule 106 (term -> term mulop factor .)
    OR              reduce using rule 106 (term -> term mulop factor .)
    COMMA           reduce using rule 106 (term -> term mulop factor .)
    RBRACKET        reduce using rule 106 (term -> term mulop factor .)


state 193

    (110) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 110 (factor -> LPAREN expression RPAREN .)


state 194

    (46) var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI . selection_stmt
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI

    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32

    selection_stmt                 shift and go to state 226

state 195

    (51) fun_declaration -> FUNCTION ID LPAREN params RPAREN . compount_stmt
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK

    LBLOCK          shift and go to state 112

    compount_stmt                  shift and go to state 227

state 196

    (52) fun_call -> ID LPAREN params RPAREN SEMI .

    CLOSETAG        reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    IDVAR           reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    TIMESTIMES      reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    AMPERSANT       reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    FUNCTION        reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    ID              reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    PRIVATE         reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    PUBLIC          reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    PROTECTED       reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    REQUIRE         reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    INCLUDE         reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    CLASS           reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    UNSET           reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    IF              reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    SWITCH          reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    CASE            reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    DEFAULT         reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    FOR             reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    WHILE           reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    DO              reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)
    ECHO            reduce using rule 52 (fun_call -> ID LPAREN params RPAREN SEMI .)


state 197

    (55) param_list -> param_list COMMA param_list .
    (55) param_list -> param_list . COMMA param_list

    COMMA           reduce using rule 55 (param_list -> param_list COMMA param_list .)
    RPAREN          reduce using rule 55 (param_list -> param_list COMMA param_list .)

  ! COMMA           [ shift and go to state 155 ]


state 198

    (58) param -> IDVAR LBRACKET RBRACKET .

    COMMA           reduce using rule 58 (param -> IDVAR LBRACKET RBRACKET .)
    RPAREN          reduce using rule 58 (param -> IDVAR LBRACKET RBRACKET .)


state 199

    (123) constructor -> ID . LPAREN RPAREN
    (124) constructor -> ID . LPAREN args RPAREN

    LPAREN          shift and go to state 228


state 200

    (122) typeclass -> ID IDVAR EQUAL NEW constructor . SEMI

    SEMI            shift and go to state 229


state 201

    (22) header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .

    CLOSETAG        reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    IDVAR           reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    TIMESTIMES      reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    AMPERSANT       reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    ID              reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    PRIVATE         reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    PUBLIC          reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    PROTECTED       reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    REQUIRE         reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    INCLUDE         reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    CLASS           reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    UNSET           reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    SWITCH          reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    CASE            reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    DEFAULT         reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    DO              reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 22 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)


state 202

    (23) header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .

    CLOSETAG        reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    IDVAR           reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    TIMESTIMES      reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    AMPERSANT       reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    ID              reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    PRIVATE         reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    PUBLIC          reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    PROTECTED       reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    REQUIRE         reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    INCLUDE         reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    CLASS           reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    UNSET           reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    SWITCH          reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    CASE            reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    DEFAULT         reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    DO              reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 23 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)


state 203

    (25) class_declaration -> CLASS ID LBLOCK attribute RBLOCK .

    CLOSETAG        reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    IDVAR           reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    TIMESTIMES      reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    AMPERSANT       reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FUNCTION        reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ID              reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PRIVATE         reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PUBLIC          reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PROTECTED       reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    REQUIRE         reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    INCLUDE         reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    CLASS           reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    UNSET           reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    IF              reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    SWITCH          reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    CASE            reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    DEFAULT         reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FOR             reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    WHILE           reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    DO              reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ECHO            reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    BREAK           reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    SEMI            reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ELSE            reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ELSEIF          reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    LPAREN          reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    NUM             reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    TRUE            reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FALSE           reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    RBLOCK          reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    LBLOCK          reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    RETURN          reduce using rule 25 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)


state 204

    (26) attribute -> attribute area . var_declaration
    (28) attribute -> attribute area . fun_declaration
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (51) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 17
    AMPERSANT       shift and go to state 18
    FUNCTION        shift and go to state 19

    var_declaration                shift and go to state 230
    fun_declaration                shift and go to state 231

state 205

    (27) attribute -> area var_declaration .

    RBLOCK          reduce using rule 27 (attribute -> area var_declaration .)
    PRIVATE         reduce using rule 27 (attribute -> area var_declaration .)
    PUBLIC          reduce using rule 27 (attribute -> area var_declaration .)
    PROTECTED       reduce using rule 27 (attribute -> area var_declaration .)


state 206

    (29) attribute -> area fun_declaration .

    RBLOCK          reduce using rule 29 (attribute -> area fun_declaration .)
    PRIVATE         reduce using rule 29 (attribute -> area fun_declaration .)
    PUBLIC          reduce using rule 29 (attribute -> area fun_declaration .)
    PROTECTED       reduce using rule 29 (attribute -> area fun_declaration .)


state 207

    (21) unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .

    CLOSETAG        reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    IDVAR           reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    TIMESTIMES      reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    AMPERSANT       reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    FUNCTION        reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    ID              reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    PRIVATE         reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    PUBLIC          reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    PROTECTED       reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    REQUIRE         reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    INCLUDE         reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    CLASS           reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    UNSET           reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    IF              reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    SWITCH          reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    CASE            reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    DEFAULT         reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    FOR             reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    WHILE           reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    DO              reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)
    ECHO            reduce using rule 21 (unset_stmt -> UNSET LPAREN IDVAR RPAREN SEMI .)


state 208

    (72) selection_stmt -> IF LPAREN expression RPAREN statement .
    (73) selection_stmt -> IF LPAREN expression RPAREN statement . selection
    (74) selection -> . ELSE statement
    (75) selection -> . ELSEIF statement selection

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    CLOSETAG        reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IDVAR           reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PRIVATE         reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PUBLIC          reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PROTECTED       reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    UNSET           reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUM             reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 233
    ELSEIF          shift and go to state 234

  ! ELSE            [ reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]
  ! ELSEIF          [ reduce using rule 72 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]

    selection                      shift and go to state 232

state 209

    (87) expression -> expression AND expression .
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    RPAREN          reduce using rule 87 (expression -> expression AND expression .)
    AND             reduce using rule 87 (expression -> expression AND expression .)
    OR              reduce using rule 87 (expression -> expression AND expression .)
    SEMI            reduce using rule 87 (expression -> expression AND expression .)
    COMMA           reduce using rule 87 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 87 (expression -> expression AND expression .)

  ! AND             [ shift and go to state 164 ]
  ! OR              [ shift and go to state 165 ]


state 210

    (88) expression -> expression OR expression .
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    RPAREN          reduce using rule 88 (expression -> expression OR expression .)
    OR              reduce using rule 88 (expression -> expression OR expression .)
    SEMI            reduce using rule 88 (expression -> expression OR expression .)
    COMMA           reduce using rule 88 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 88 (expression -> expression OR expression .)
    AND             shift and go to state 164

  ! AND             [ reduce using rule 88 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 165 ]


state 211

    (84) expression -> var EQUAL expression .
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    RPAREN          reduce using rule 84 (expression -> var EQUAL expression .)
    SEMI            reduce using rule 84 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 84 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 84 (expression -> var EQUAL expression .)
    AND             shift and go to state 164
    OR              shift and go to state 165

  ! AND             [ reduce using rule 84 (expression -> var EQUAL expression .) ]
  ! OR              [ reduce using rule 84 (expression -> var EQUAL expression .) ]


state 212

    (86) expression -> var EQUAL AMPERSANT . IDVAR

    IDVAR           shift and go to state 235


state 213

    (76) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    CLOSETAG        reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IDVAR           reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TIMESTIMES      reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    AMPERSANT       reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FUNCTION        reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PRIVATE         reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PUBLIC          reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PROTECTED       reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    REQUIRE         reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    INCLUDE         reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CLASS           reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    UNSET           reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DO              reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ECHO            reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMI            reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSEIF          reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUM             reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TRUE            reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FALSE           reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RBLOCK          reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 76 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 214

    (77) selection_stmt -> CASE NUM COLON statement BREAK . SEMI

    SEMI            shift and go to state 236


state 215

    (78) selection_stmt -> DEFAULT COLON statement BREAK SEMI .

    CLOSETAG        reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    IDVAR           reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    TIMESTIMES      reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    AMPERSANT       reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    FUNCTION        reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ID              reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    PRIVATE         reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    PUBLIC          reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    PROTECTED       reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    REQUIRE         reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    INCLUDE         reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    CLASS           reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    UNSET           reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    IF              reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    SWITCH          reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    CASE            reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    DEFAULT         reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    FOR             reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    WHILE           reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    DO              reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ECHO            reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    BREAK           reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    SEMI            reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ELSE            reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ELSEIF          reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    LPAREN          reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    NUM             reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    TRUE            reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    FALSE           reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    RBLOCK          reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    LBLOCK          reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    RETURN          reduce using rule 78 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)


state 216

    (59) compount_stmt -> LBLOCK echo_stmt local_declarations . echo_stmt statement_list echo_stmt RBLOCK
    (60) local_declarations -> local_declarations . var_declaration
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (33) var_declaration -> . IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR SEMI
    (35) var_declaration -> . TIMESTIMES IDVAR SEMI
    (36) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (38) var_declaration -> . IDVAR EQUAL NUM SEMI
    (39) var_declaration -> . IDVAR EQUAL NULL SEMI var_declaration
    (40) var_declaration -> . IDVAR EQUAL NULL SEMI
    (41) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . IDVAR EQUAL boolean SEMI
    (43) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (44) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (45) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (46) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (47) var_declaration -> . IDVAR EQUAL AMPERSANT IDVAR SEMI
    (48) var_declaration -> . IDVAR EQUAL STRING SEMI
    (49) var_declaration -> . AMPERSANT IDVAR SEMI
    (50) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (125) empty -> .

  ! shift/reduce conflict for IDVAR resolved as shift
    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 17
    AMPERSANT       shift and go to state 18
    ECHO            reduce using rule 125 (empty -> .)
    LBLOCK          reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    SWITCH          reduce using rule 125 (empty -> .)
    CASE            reduce using rule 125 (empty -> .)
    DEFAULT         reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    DO              reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    CLASS           reduce using rule 125 (empty -> .)
    PRIVATE         reduce using rule 125 (empty -> .)
    PUBLIC          reduce using rule 125 (empty -> .)
    PROTECTED       reduce using rule 125 (empty -> .)
    LPAREN          reduce using rule 125 (empty -> .)
    NUM             reduce using rule 125 (empty -> .)
    TRUE            reduce using rule 125 (empty -> .)
    FALSE           reduce using rule 125 (empty -> .)
    RBLOCK          reduce using rule 125 (empty -> .)

  ! IDVAR           [ reduce using rule 125 (empty -> .) ]

    echo_stmt                      shift and go to state 237
    var_declaration                shift and go to state 238
    empty                          shift and go to state 27

state 217

    (61) local_declarations -> empty .

    IDVAR           reduce using rule 61 (local_declarations -> empty .)
    TIMESTIMES      reduce using rule 61 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 61 (local_declarations -> empty .)
    ECHO            reduce using rule 61 (local_declarations -> empty .)
    LBLOCK          reduce using rule 61 (local_declarations -> empty .)
    IF              reduce using rule 61 (local_declarations -> empty .)
    SWITCH          reduce using rule 61 (local_declarations -> empty .)
    CASE            reduce using rule 61 (local_declarations -> empty .)
    DEFAULT         reduce using rule 61 (local_declarations -> empty .)
    FOR             reduce using rule 61 (local_declarations -> empty .)
    WHILE           reduce using rule 61 (local_declarations -> empty .)
    DO              reduce using rule 61 (local_declarations -> empty .)
    RETURN          reduce using rule 61 (local_declarations -> empty .)
    CLASS           reduce using rule 61 (local_declarations -> empty .)
    PRIVATE         reduce using rule 61 (local_declarations -> empty .)
    PUBLIC          reduce using rule 61 (local_declarations -> empty .)
    PROTECTED       reduce using rule 61 (local_declarations -> empty .)
    LPAREN          reduce using rule 61 (local_declarations -> empty .)
    NUM             reduce using rule 61 (local_declarations -> empty .)
    TRUE            reduce using rule 61 (local_declarations -> empty .)
    FALSE           reduce using rule 61 (local_declarations -> empty .)
    RBLOCK          reduce using rule 61 (local_declarations -> empty .)


state 218

    (83) return_stmt -> RETURN expression SEMI .

    BREAK           reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    SEMI            reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    ELSE            reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    ELSEIF          reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    CLOSETAG        reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    IDVAR           reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    TIMESTIMES      reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    AMPERSANT       reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    FUNCTION        reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    ID              reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    PRIVATE         reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    PUBLIC          reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    PROTECTED       reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    REQUIRE         reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    INCLUDE         reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    CLASS           reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    UNSET           reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    IF              reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    SWITCH          reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    CASE            reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    FOR             reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    WHILE           reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    DO              reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    ECHO            reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    LPAREN          reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    NUM             reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    TRUE            reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    FALSE           reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    RBLOCK          reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    LBLOCK          reduce using rule 83 (return_stmt -> RETURN expression SEMI .)
    RETURN          reduce using rule 83 (return_stmt -> RETURN expression SEMI .)


state 219

    (79) iteration_stmt -> FOR LPAREN var_declaration expression SEMI . additive_expression RPAREN statement
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    IDVAR           shift and go to state 190
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    additive_expression            shift and go to state 239
    term                           shift and go to state 76
    factor                         shift and go to state 77
    var                            shift and go to state 79
    boolean                        shift and go to state 99

state 220

    (80) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    CLOSETAG        reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IDVAR           reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PRIVATE         reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PUBLIC          reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PROTECTED       reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    UNSET           reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSEIF          reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUM             reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 80 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 221

    (81) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 240


state 222

    (24) class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .

    CLOSETAG        reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    IDVAR           reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    TIMESTIMES      reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    AMPERSANT       reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FUNCTION        reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ID              reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PRIVATE         reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PUBLIC          reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PROTECTED       reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    REQUIRE         reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    INCLUDE         reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    CLASS           reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    UNSET           reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    IF              reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    SWITCH          reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    CASE            reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    DEFAULT         reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FOR             reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    WHILE           reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    DO              reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ECHO            reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    BREAK           reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    SEMI            reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ELSE            reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ELSEIF          reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    LPAREN          reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    NUM             reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    TRUE            reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FALSE           reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    RBLOCK          reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    LBLOCK          reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    RETURN          reduce using rule 24 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)


state 223

    (114) factor -> IDVAR LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    TIMES           reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    DIVIDE          reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    LESS            reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    GREATER         reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    DEQUAL          reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    DISTINT         reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    PLUS            reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    MINUS           reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    SEMI            reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    RPAREN          reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    AND             reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    OR              reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    COMMA           reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)
    RBRACKET        reduce using rule 114 (factor -> IDVAR LPAREN args RPAREN .)


state 224

    (118) args_list -> args_list COMMA . expression
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 241
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 225

    (90) var -> IDVAR LBRACKET expression RBRACKET .

    MINUSMINUS      reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    LESS            reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    AND             reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    OR              reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 90 (var -> IDVAR LBRACKET expression RBRACKET .)


state 226

    (46) var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .

    CLOSETAG        reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    IDVAR           reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    TIMESTIMES      reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    AMPERSANT       reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    FUNCTION        reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    ID              reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    PRIVATE         reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    PUBLIC          reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    PROTECTED       reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    REQUIRE         reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    INCLUDE         reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    CLASS           reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    UNSET           reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    IF              reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    SWITCH          reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    CASE            reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    DEFAULT         reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    FOR             reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    WHILE           reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    DO              reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    ECHO            reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    LPAREN          reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    NUM             reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    TRUE            reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    FALSE           reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    RBLOCK          reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    LBLOCK          reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    RETURN          reduce using rule 46 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)


state 227

    (51) fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .

    CLOSETAG        reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    IDVAR           reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    TIMESTIMES      reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    AMPERSANT       reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FUNCTION        reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    ID              reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PRIVATE         reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PUBLIC          reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PROTECTED       reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    REQUIRE         reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    INCLUDE         reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    CLASS           reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    UNSET           reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    IF              reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SWITCH          reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    CASE            reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DEFAULT         reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FOR             reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    WHILE           reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DO              reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    ECHO            reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SEMI            reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    RBLOCK          reduce using rule 51 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)


state 228

    (123) constructor -> ID LPAREN . RPAREN
    (124) constructor -> ID LPAREN . args RPAREN
    (115) args -> . args_list
    (116) args -> . empty
    (117) args -> . VOID
    (118) args_list -> . args_list COMMA expression
    (119) args_list -> . expression
    (125) empty -> .
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 242
    VOID            shift and go to state 182
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

  ! RPAREN          [ reduce using rule 125 (empty -> .) ]

    args                           shift and go to state 243
    args_list                      shift and go to state 180
    empty                          shift and go to state 181
    expression                     shift and go to state 183
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 229

    (122) typeclass -> ID IDVAR EQUAL NEW constructor SEMI .

    CLOSETAG        reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    IDVAR           reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    TIMESTIMES      reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    AMPERSANT       reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    FUNCTION        reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    ID              reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    PRIVATE         reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    PUBLIC          reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    PROTECTED       reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    REQUIRE         reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    INCLUDE         reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    CLASS           reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    UNSET           reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    IF              reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    SWITCH          reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    CASE            reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    DEFAULT         reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    FOR             reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    WHILE           reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    DO              reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    ECHO            reduce using rule 122 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)


state 230

    (26) attribute -> attribute area var_declaration .

    RBLOCK          reduce using rule 26 (attribute -> attribute area var_declaration .)
    PRIVATE         reduce using rule 26 (attribute -> attribute area var_declaration .)
    PUBLIC          reduce using rule 26 (attribute -> attribute area var_declaration .)
    PROTECTED       reduce using rule 26 (attribute -> attribute area var_declaration .)


state 231

    (28) attribute -> attribute area fun_declaration .

    RBLOCK          reduce using rule 28 (attribute -> attribute area fun_declaration .)
    PRIVATE         reduce using rule 28 (attribute -> attribute area fun_declaration .)
    PUBLIC          reduce using rule 28 (attribute -> attribute area fun_declaration .)
    PROTECTED       reduce using rule 28 (attribute -> attribute area fun_declaration .)


state 232

    (73) selection_stmt -> IF LPAREN expression RPAREN statement selection .

    CLOSETAG        reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    IDVAR           reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TIMESTIMES      reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    AMPERSANT       reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FUNCTION        reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ID              reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PRIVATE         reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PUBLIC          reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PROTECTED       reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    REQUIRE         reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    INCLUDE         reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    CLASS           reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    UNSET           reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    IF              reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SWITCH          reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    CASE            reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DEFAULT         reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FOR             reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    WHILE           reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DO              reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ECHO            reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    BREAK           reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SEMI            reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSE            reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSEIF          reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LPAREN          reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    NUM             reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TRUE            reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FALSE           reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RBLOCK          reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LBLOCK          reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RETURN          reduce using rule 73 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)


state 233

    (74) selection -> ELSE . statement
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (125) empty -> .
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    ECHO            reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    ELSEIF          reduce using rule 125 (empty -> .)
    CLOSETAG        reduce using rule 125 (empty -> .)
    TIMESTIMES      reduce using rule 125 (empty -> .)
    AMPERSANT       reduce using rule 125 (empty -> .)
    FUNCTION        reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    REQUIRE         reduce using rule 125 (empty -> .)
    INCLUDE         reduce using rule 125 (empty -> .)
    UNSET           reduce using rule 125 (empty -> .)
    BREAK           reduce using rule 125 (empty -> .)
    SEMI            reduce using rule 125 (empty -> .)
    RBLOCK          reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

  ! IDVAR           [ reduce using rule 125 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 125 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 125 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 125 (empty -> .) ]
  ! CLASS           [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! SWITCH          [ reduce using rule 125 (empty -> .) ]
  ! CASE            [ reduce using rule 125 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! DO              [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! NUM             [ reduce using rule 125 (empty -> .) ]
  ! TRUE            [ reduce using rule 125 (empty -> .) ]
  ! FALSE           [ reduce using rule 125 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]

    statement                      shift and go to state 244
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    echo_stmt                      shift and go to state 110
    expression                     shift and go to state 111
    var                            shift and go to state 95
    additive_expression            shift and go to state 75
    area                           shift and go to state 114
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 234

    (75) selection -> ELSEIF . statement selection
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (125) empty -> .
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    ECHO            reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    ELSEIF          reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    statement                      shift and go to state 245
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    echo_stmt                      shift and go to state 110
    expression                     shift and go to state 111
    var                            shift and go to state 95
    additive_expression            shift and go to state 75
    area                           shift and go to state 114
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 235

    (86) expression -> var EQUAL AMPERSANT IDVAR .

    RPAREN          reduce using rule 86 (expression -> var EQUAL AMPERSANT IDVAR .)
    AND             reduce using rule 86 (expression -> var EQUAL AMPERSANT IDVAR .)
    OR              reduce using rule 86 (expression -> var EQUAL AMPERSANT IDVAR .)
    SEMI            reduce using rule 86 (expression -> var EQUAL AMPERSANT IDVAR .)
    COMMA           reduce using rule 86 (expression -> var EQUAL AMPERSANT IDVAR .)
    RBRACKET        reduce using rule 86 (expression -> var EQUAL AMPERSANT IDVAR .)


state 236

    (77) selection_stmt -> CASE NUM COLON statement BREAK SEMI .

    CLOSETAG        reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    IDVAR           reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    TIMESTIMES      reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    AMPERSANT       reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    FUNCTION        reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ID              reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    PRIVATE         reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    PUBLIC          reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    PROTECTED       reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    REQUIRE         reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    INCLUDE         reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    CLASS           reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    UNSET           reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    IF              reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    SWITCH          reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    CASE            reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    DEFAULT         reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    FOR             reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    WHILE           reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    DO              reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ECHO            reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    BREAK           reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    SEMI            reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ELSE            reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ELSEIF          reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    LPAREN          reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    NUM             reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    TRUE            reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    FALSE           reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    RBLOCK          reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    LBLOCK          reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    RETURN          reduce using rule 77 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)


state 237

    (59) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt . statement_list echo_stmt RBLOCK
    (15) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (16) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (18) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (19) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (20) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI
    (62) statement_list -> . statement_list statement
    (63) statement_list -> . empty
    (125) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 40
    LBLOCK          reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    SWITCH          reduce using rule 125 (empty -> .)
    CASE            reduce using rule 125 (empty -> .)
    DEFAULT         reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    DO              reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    CLASS           reduce using rule 125 (empty -> .)
    PRIVATE         reduce using rule 125 (empty -> .)
    PUBLIC          reduce using rule 125 (empty -> .)
    PROTECTED       reduce using rule 125 (empty -> .)
    IDVAR           reduce using rule 125 (empty -> .)
    LPAREN          reduce using rule 125 (empty -> .)
    NUM             reduce using rule 125 (empty -> .)
    TRUE            reduce using rule 125 (empty -> .)
    FALSE           reduce using rule 125 (empty -> .)
    RBLOCK          reduce using rule 125 (empty -> .)

  ! ECHO            [ reduce using rule 125 (empty -> .) ]

    statement_list                 shift and go to state 246
    empty                          shift and go to state 247

state 238

    (60) local_declarations -> local_declarations var_declaration .

    IDVAR           reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    TIMESTIMES      reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    AMPERSANT       reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    ECHO            reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    DO              reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    CLASS           reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    PRIVATE         reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    PUBLIC          reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    PROTECTED       reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    NUM             reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    TRUE            reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    FALSE           reduce using rule 60 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 60 (local_declarations -> local_declarations var_declaration .)


state 239

    (79) iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression . RPAREN statement
    (100) additive_expression -> additive_expression . addop term
    (104) addop -> . PLUS
    (105) addop -> . MINUS

    RPAREN          shift and go to state 248
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143

    addop                          shift and go to state 134

state 240

    (81) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 249


state 241

    (118) args_list -> args_list COMMA expression .
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    COMMA           reduce using rule 118 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 118 (args_list -> args_list COMMA expression .)
    AND             shift and go to state 164
    OR              shift and go to state 165


state 242

    (123) constructor -> ID LPAREN RPAREN .

    SEMI            reduce using rule 123 (constructor -> ID LPAREN RPAREN .)


state 243

    (124) constructor -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 250


state 244

    (74) selection -> ELSE statement .

    ELSE            reduce using rule 74 (selection -> ELSE statement .)
    ELSEIF          reduce using rule 74 (selection -> ELSE statement .)
    CLOSETAG        reduce using rule 74 (selection -> ELSE statement .)
    IDVAR           reduce using rule 74 (selection -> ELSE statement .)
    TIMESTIMES      reduce using rule 74 (selection -> ELSE statement .)
    AMPERSANT       reduce using rule 74 (selection -> ELSE statement .)
    FUNCTION        reduce using rule 74 (selection -> ELSE statement .)
    ID              reduce using rule 74 (selection -> ELSE statement .)
    PRIVATE         reduce using rule 74 (selection -> ELSE statement .)
    PUBLIC          reduce using rule 74 (selection -> ELSE statement .)
    PROTECTED       reduce using rule 74 (selection -> ELSE statement .)
    REQUIRE         reduce using rule 74 (selection -> ELSE statement .)
    INCLUDE         reduce using rule 74 (selection -> ELSE statement .)
    CLASS           reduce using rule 74 (selection -> ELSE statement .)
    UNSET           reduce using rule 74 (selection -> ELSE statement .)
    IF              reduce using rule 74 (selection -> ELSE statement .)
    SWITCH          reduce using rule 74 (selection -> ELSE statement .)
    CASE            reduce using rule 74 (selection -> ELSE statement .)
    DEFAULT         reduce using rule 74 (selection -> ELSE statement .)
    FOR             reduce using rule 74 (selection -> ELSE statement .)
    WHILE           reduce using rule 74 (selection -> ELSE statement .)
    DO              reduce using rule 74 (selection -> ELSE statement .)
    ECHO            reduce using rule 74 (selection -> ELSE statement .)
    BREAK           reduce using rule 74 (selection -> ELSE statement .)
    SEMI            reduce using rule 74 (selection -> ELSE statement .)
    LPAREN          reduce using rule 74 (selection -> ELSE statement .)
    NUM             reduce using rule 74 (selection -> ELSE statement .)
    TRUE            reduce using rule 74 (selection -> ELSE statement .)
    FALSE           reduce using rule 74 (selection -> ELSE statement .)
    RBLOCK          reduce using rule 74 (selection -> ELSE statement .)
    LBLOCK          reduce using rule 74 (selection -> ELSE statement .)
    RETURN          reduce using rule 74 (selection -> ELSE statement .)


state 245

    (75) selection -> ELSEIF statement . selection
    (74) selection -> . ELSE statement
    (75) selection -> . ELSEIF statement selection

    ELSE            shift and go to state 233
    ELSEIF          shift and go to state 234

    selection                      shift and go to state 251

state 246

    (59) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list . echo_stmt RBLOCK
    (62) statement_list -> statement_list . statement
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (125) empty -> .
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBLOCK          reduce using rule 125 (empty -> .)
    ECHO            reduce using rule 125 (empty -> .)
    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

  ! LBLOCK          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! SWITCH          [ reduce using rule 125 (empty -> .) ]
  ! CASE            [ reduce using rule 125 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! DO              [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! CLASS           [ reduce using rule 125 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 125 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 125 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 125 (empty -> .) ]
  ! IDVAR           [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! NUM             [ reduce using rule 125 (empty -> .) ]
  ! TRUE            [ reduce using rule 125 (empty -> .) ]
  ! FALSE           [ reduce using rule 125 (empty -> .) ]

    echo_stmt                      shift and go to state 252
    statement                      shift and go to state 253
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    expression                     shift and go to state 111
    var                            shift and go to state 95
    additive_expression            shift and go to state 75
    area                           shift and go to state 114
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 247

    (63) statement_list -> empty .

    LBLOCK          reduce using rule 63 (statement_list -> empty .)
    IF              reduce using rule 63 (statement_list -> empty .)
    SWITCH          reduce using rule 63 (statement_list -> empty .)
    CASE            reduce using rule 63 (statement_list -> empty .)
    DEFAULT         reduce using rule 63 (statement_list -> empty .)
    FOR             reduce using rule 63 (statement_list -> empty .)
    WHILE           reduce using rule 63 (statement_list -> empty .)
    DO              reduce using rule 63 (statement_list -> empty .)
    RETURN          reduce using rule 63 (statement_list -> empty .)
    CLASS           reduce using rule 63 (statement_list -> empty .)
    PRIVATE         reduce using rule 63 (statement_list -> empty .)
    PUBLIC          reduce using rule 63 (statement_list -> empty .)
    PROTECTED       reduce using rule 63 (statement_list -> empty .)
    IDVAR           reduce using rule 63 (statement_list -> empty .)
    LPAREN          reduce using rule 63 (statement_list -> empty .)
    NUM             reduce using rule 63 (statement_list -> empty .)
    TRUE            reduce using rule 63 (statement_list -> empty .)
    FALSE           reduce using rule 63 (statement_list -> empty .)
    RBLOCK          reduce using rule 63 (statement_list -> empty .)
    ECHO            reduce using rule 63 (statement_list -> empty .)


state 248

    (79) iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN . statement
    (64) statement -> . expression_stmt
    (65) statement -> . compount_stmt
    (66) statement -> . selection_stmt
    (67) statement -> . iteration_stmt
    (68) statement -> . return_stmt
    (69) statement -> . class_declaration
    (70) statement -> . echo_stmt
    (71) expression_stmt -> . expression SEMI
    (59) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (72) selection_stmt -> . IF LPAREN expression RPAREN statement
    (73) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (76) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (77) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (78) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (79) iteration_stmt -> . FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement
    (80) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (81) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (82) return_stmt -> . RETURN SEMI
    (83) return_stmt -> . RETURN expression SEMI
    (24) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (25) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (15) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (16) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (17) echo_stmt -> . empty
    (18) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (19) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (20) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (30) area -> . PRIVATE
    (31) area -> . PUBLIC
    (32) area -> . PROTECTED
    (125) empty -> .
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 112
    IF              shift and go to state 29
    SWITCH          shift and go to state 30
    CASE            shift and go to state 31
    DEFAULT         shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    RETURN          shift and go to state 113
    CLASS           shift and go to state 26
    PRIVATE         shift and go to state 21
    PUBLIC          shift and go to state 22
    PROTECTED       shift and go to state 23
    ECHO            reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    ELSEIF          reduce using rule 125 (empty -> .)
    CLOSETAG        reduce using rule 125 (empty -> .)
    TIMESTIMES      reduce using rule 125 (empty -> .)
    AMPERSANT       reduce using rule 125 (empty -> .)
    FUNCTION        reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    REQUIRE         reduce using rule 125 (empty -> .)
    INCLUDE         reduce using rule 125 (empty -> .)
    UNSET           reduce using rule 125 (empty -> .)
    BREAK           reduce using rule 125 (empty -> .)
    SEMI            reduce using rule 125 (empty -> .)
    RBLOCK          reduce using rule 125 (empty -> .)
    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

  ! IDVAR           [ reduce using rule 125 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 125 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 125 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 125 (empty -> .) ]
  ! CLASS           [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! SWITCH          [ reduce using rule 125 (empty -> .) ]
  ! CASE            [ reduce using rule 125 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! DO              [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! NUM             [ reduce using rule 125 (empty -> .) ]
  ! TRUE            [ reduce using rule 125 (empty -> .) ]
  ! FALSE           [ reduce using rule 125 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 111
    additive_expression            shift and go to state 75
    statement                      shift and go to state 254
    expression_stmt                shift and go to state 104
    compount_stmt                  shift and go to state 105
    selection_stmt                 shift and go to state 106
    iteration_stmt                 shift and go to state 107
    return_stmt                    shift and go to state 108
    class_declaration              shift and go to state 109
    echo_stmt                      shift and go to state 110
    var                            shift and go to state 95
    area                           shift and go to state 114
    empty                          shift and go to state 27
    boolean                        shift and go to state 99
    simple_expression              shift and go to state 96
    term                           shift and go to state 76
    factor                         shift and go to state 77

state 249

    (81) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN . expression RPAREN
    (84) expression -> . var EQUAL expression
    (85) expression -> . simple_expression
    (86) expression -> . var EQUAL AMPERSANT IDVAR
    (87) expression -> . expression AND expression
    (88) expression -> . expression OR expression
    (89) var -> . IDVAR
    (90) var -> . IDVAR LBRACKET expression RBRACKET
    (91) simple_expression -> . additive_expression relop additive_expression
    (92) simple_expression -> . additive_expression
    (100) additive_expression -> . additive_expression addop term
    (101) additive_expression -> . term
    (102) additive_expression -> . term MINUSMINUS
    (103) additive_expression -> . term PLUSPLUS
    (106) term -> . term mulop factor
    (107) term -> . factor
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . var
    (112) factor -> . NUM
    (113) factor -> . boolean
    (114) factor -> . IDVAR LPAREN args RPAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    IDVAR           shift and go to state 97
    LPAREN          shift and go to state 78
    NUM             shift and go to state 98
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    expression                     shift and go to state 255
    var                            shift and go to state 95
    simple_expression              shift and go to state 96
    additive_expression            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    boolean                        shift and go to state 99

state 250

    (124) constructor -> ID LPAREN args RPAREN .

    SEMI            reduce using rule 124 (constructor -> ID LPAREN args RPAREN .)


state 251

    (75) selection -> ELSEIF statement selection .

    ELSE            reduce using rule 75 (selection -> ELSEIF statement selection .)
    ELSEIF          reduce using rule 75 (selection -> ELSEIF statement selection .)
    CLOSETAG        reduce using rule 75 (selection -> ELSEIF statement selection .)
    IDVAR           reduce using rule 75 (selection -> ELSEIF statement selection .)
    TIMESTIMES      reduce using rule 75 (selection -> ELSEIF statement selection .)
    AMPERSANT       reduce using rule 75 (selection -> ELSEIF statement selection .)
    FUNCTION        reduce using rule 75 (selection -> ELSEIF statement selection .)
    ID              reduce using rule 75 (selection -> ELSEIF statement selection .)
    PRIVATE         reduce using rule 75 (selection -> ELSEIF statement selection .)
    PUBLIC          reduce using rule 75 (selection -> ELSEIF statement selection .)
    PROTECTED       reduce using rule 75 (selection -> ELSEIF statement selection .)
    REQUIRE         reduce using rule 75 (selection -> ELSEIF statement selection .)
    INCLUDE         reduce using rule 75 (selection -> ELSEIF statement selection .)
    CLASS           reduce using rule 75 (selection -> ELSEIF statement selection .)
    UNSET           reduce using rule 75 (selection -> ELSEIF statement selection .)
    IF              reduce using rule 75 (selection -> ELSEIF statement selection .)
    SWITCH          reduce using rule 75 (selection -> ELSEIF statement selection .)
    CASE            reduce using rule 75 (selection -> ELSEIF statement selection .)
    DEFAULT         reduce using rule 75 (selection -> ELSEIF statement selection .)
    FOR             reduce using rule 75 (selection -> ELSEIF statement selection .)
    WHILE           reduce using rule 75 (selection -> ELSEIF statement selection .)
    DO              reduce using rule 75 (selection -> ELSEIF statement selection .)
    ECHO            reduce using rule 75 (selection -> ELSEIF statement selection .)
    BREAK           reduce using rule 75 (selection -> ELSEIF statement selection .)
    SEMI            reduce using rule 75 (selection -> ELSEIF statement selection .)
    LPAREN          reduce using rule 75 (selection -> ELSEIF statement selection .)
    NUM             reduce using rule 75 (selection -> ELSEIF statement selection .)
    TRUE            reduce using rule 75 (selection -> ELSEIF statement selection .)
    FALSE           reduce using rule 75 (selection -> ELSEIF statement selection .)
    RBLOCK          reduce using rule 75 (selection -> ELSEIF statement selection .)
    LBLOCK          reduce using rule 75 (selection -> ELSEIF statement selection .)
    RETURN          reduce using rule 75 (selection -> ELSEIF statement selection .)


state 252

    (59) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt . RBLOCK
    (15) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (16) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (18) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (19) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (20) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI
    (70) statement -> echo_stmt .

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    RBLOCK          shift and go to state 256
    ECHO            shift and go to state 40
    LBLOCK          reduce using rule 70 (statement -> echo_stmt .)
    IF              reduce using rule 70 (statement -> echo_stmt .)
    SWITCH          reduce using rule 70 (statement -> echo_stmt .)
    CASE            reduce using rule 70 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 70 (statement -> echo_stmt .)
    FOR             reduce using rule 70 (statement -> echo_stmt .)
    WHILE           reduce using rule 70 (statement -> echo_stmt .)
    DO              reduce using rule 70 (statement -> echo_stmt .)
    RETURN          reduce using rule 70 (statement -> echo_stmt .)
    CLASS           reduce using rule 70 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 70 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 70 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 70 (statement -> echo_stmt .)
    IDVAR           reduce using rule 70 (statement -> echo_stmt .)
    LPAREN          reduce using rule 70 (statement -> echo_stmt .)
    NUM             reduce using rule 70 (statement -> echo_stmt .)
    TRUE            reduce using rule 70 (statement -> echo_stmt .)
    FALSE           reduce using rule 70 (statement -> echo_stmt .)

  ! RBLOCK          [ reduce using rule 70 (statement -> echo_stmt .) ]
  ! ECHO            [ reduce using rule 70 (statement -> echo_stmt .) ]


state 253

    (62) statement_list -> statement_list statement .

    LBLOCK          reduce using rule 62 (statement_list -> statement_list statement .)
    IF              reduce using rule 62 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 62 (statement_list -> statement_list statement .)
    CASE            reduce using rule 62 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 62 (statement_list -> statement_list statement .)
    FOR             reduce using rule 62 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 62 (statement_list -> statement_list statement .)
    DO              reduce using rule 62 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 62 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 62 (statement_list -> statement_list statement .)
    PRIVATE         reduce using rule 62 (statement_list -> statement_list statement .)
    PUBLIC          reduce using rule 62 (statement_list -> statement_list statement .)
    PROTECTED       reduce using rule 62 (statement_list -> statement_list statement .)
    IDVAR           reduce using rule 62 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 62 (statement_list -> statement_list statement .)
    NUM             reduce using rule 62 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 62 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 62 (statement_list -> statement_list statement .)
    RBLOCK          reduce using rule 62 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 62 (statement_list -> statement_list statement .)


state 254

    (79) iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .

    CLOSETAG        reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    IDVAR           reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    TIMESTIMES      reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    AMPERSANT       reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    ID              reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    PRIVATE         reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    PUBLIC          reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    PROTECTED       reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    REQUIRE         reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    INCLUDE         reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    CLASS           reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    UNSET           reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    IF              reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    SWITCH          reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    CASE            reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    FOR             reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    WHILE           reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    DO              reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    ECHO            reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    BREAK           reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    SEMI            reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    ELSE            reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    ELSEIF          reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    LPAREN          reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    NUM             reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    TRUE            reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    FALSE           reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)
    RETURN          reduce using rule 79 (iteration_stmt -> FOR LPAREN var_declaration expression SEMI additive_expression RPAREN statement .)


state 255

    (81) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression . RPAREN
    (87) expression -> expression . AND expression
    (88) expression -> expression . OR expression

    RPAREN          shift and go to state 257
    AND             shift and go to state 164
    OR              shift and go to state 165


state 256

    (59) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .

    BREAK           reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SEMI            reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSE            reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSEIF          reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CLOSETAG        reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    IDVAR           reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TIMESTIMES      reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    AMPERSANT       reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FUNCTION        reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ID              reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PRIVATE         reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PUBLIC          reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PROTECTED       reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    REQUIRE         reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    INCLUDE         reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CLASS           reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    UNSET           reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    IF              reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SWITCH          reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CASE            reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DEFAULT         reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FOR             reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    WHILE           reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DO              reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ECHO            reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LPAREN          reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    NUM             reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TRUE            reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FALSE           reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RBLOCK          reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LBLOCK          reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RETURN          reduce using rule 59 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)


state 257

    (81) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .

    CLOSETAG        reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    IDVAR           reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    TIMESTIMES      reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    PRIVATE         reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    PUBLIC          reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    PROTECTED       reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    REQUIRE         reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    INCLUDE         reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    CLASS           reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    UNSET           reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ECHO            reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    SEMI            reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ELSEIF          reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    NUM             reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    TRUE            reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    FALSE           reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    LBLOCK          reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 81 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDVAR in state 2 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 2 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 2 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 2 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 2 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 2 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for UNSET in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for CASE in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for DO in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSETAG in state 3 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 3 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 3 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 3 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 3 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 3 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 3 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for UNSET in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for CASE in state 3 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 11 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 68 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 69 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 71 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 110 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 163 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 163 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 163 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 163 resolved as shift
WARNING: shift/reduce conflict for IF in state 163 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 163 resolved as shift
WARNING: shift/reduce conflict for CASE in state 163 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 163 resolved as shift
WARNING: shift/reduce conflict for FOR in state 163 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 163 resolved as shift
WARNING: shift/reduce conflict for DO in state 163 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 163 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 163 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 163 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 163 resolved as shift
WARNING: shift/reduce conflict for NUM in state 163 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 163 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 163 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 167 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 167 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 167 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 167 resolved as shift
WARNING: shift/reduce conflict for IF in state 167 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 167 resolved as shift
WARNING: shift/reduce conflict for CASE in state 167 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 167 resolved as shift
WARNING: shift/reduce conflict for FOR in state 167 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 167 resolved as shift
WARNING: shift/reduce conflict for DO in state 167 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 167 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 167 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 167 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 167 resolved as shift
WARNING: shift/reduce conflict for NUM in state 167 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 167 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 167 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 171 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 175 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 175 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 175 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 175 resolved as shift
WARNING: shift/reduce conflict for IF in state 175 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 175 resolved as shift
WARNING: shift/reduce conflict for CASE in state 175 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 175 resolved as shift
WARNING: shift/reduce conflict for FOR in state 175 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 175 resolved as shift
WARNING: shift/reduce conflict for DO in state 175 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 175 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 175 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 175 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 175 resolved as shift
WARNING: shift/reduce conflict for NUM in state 175 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 175 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 175 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 208 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 208 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 216 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 228 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 233 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 233 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 233 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 233 resolved as shift
WARNING: shift/reduce conflict for IF in state 233 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 233 resolved as shift
WARNING: shift/reduce conflict for CASE in state 233 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 233 resolved as shift
WARNING: shift/reduce conflict for FOR in state 233 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 233 resolved as shift
WARNING: shift/reduce conflict for DO in state 233 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 233 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 233 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 233 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 233 resolved as shift
WARNING: shift/reduce conflict for NUM in state 233 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 233 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 233 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 237 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 246 resolved as shift
WARNING: shift/reduce conflict for IF in state 246 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 246 resolved as shift
WARNING: shift/reduce conflict for CASE in state 246 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 246 resolved as shift
WARNING: shift/reduce conflict for FOR in state 246 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 246 resolved as shift
WARNING: shift/reduce conflict for DO in state 246 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 246 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 246 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 246 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 246 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 246 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 246 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 246 resolved as shift
WARNING: shift/reduce conflict for NUM in state 246 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 246 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 246 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 248 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 248 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 248 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 248 resolved as shift
WARNING: shift/reduce conflict for IF in state 248 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 248 resolved as shift
WARNING: shift/reduce conflict for CASE in state 248 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 248 resolved as shift
WARNING: shift/reduce conflict for FOR in state 248 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 248 resolved as shift
WARNING: shift/reduce conflict for DO in state 248 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 248 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 248 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 248 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 248 resolved as shift
WARNING: shift/reduce conflict for NUM in state 248 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 248 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 248 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 252 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 252 resolved as shift
